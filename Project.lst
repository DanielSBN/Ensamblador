Microsoft (R) Macro Assembler Version 14.11.25547.0	    11/16/17 10:27:24
main.asm						     Page 1 - 1


				; PROYECTO DE LENGUAJE ENSAMBLADOR
				; ARQUITECTURA DE COMPUTADORES, SEMESTRE 2017-II
				; Integrantes: Kewin Evers Yagari, Daniel Sanchez Buitrago, Daniel Velez Santamaria
				; Docente: Hugo de Jesus Mesa Yepes

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.DATA
					; Valores para comparar con 0
 00000000 2B8CBCCC			epsilon REAL4 1.0E-12
					
					; Mensaje de bienvenida para el programa
 00000004 42 49 45 4E 56		bienvenida BYTE "BIENVENIDO USUARIO", 0Dh, 0Ah,
	   45 4E 49 44 4F
	   20 55 53 55 41
	   52 49 4F 0D 0A
	   45 73 74 65 20
	   70 72 6F 67 72
	   61 6D 61 20 63
	   61 6C 63 75 6C
	   61 20 65 6C 20
	   63 61 6D 69 6E
	   6F 20 6D 61 73
	   20 63 6F 72 74
	   6F 20 65 6E 20
	   75 6E 20 67 72
	   61 66 6F 20 64
	   65 73 64 65 20
	   65 6C 20 6E 6F
	   64 6F 20 64 65
	   20 70 61 72 74
	   69 64 61 20 68
	   61 73 74 61 20
	   74 6F 64 6F 73
	   20 6C 6F 73 20
	   64 65 6D 61 73
	   20 6E 6F 64 6F
	   73 2E 00
									"Este programa calcula el camino mas corto en un grafo desde el nodo de partida hasta todos los demas nodos.", 0

					; Mensaje para pedir la cantidad de nodos
 00000084 49 6E 67 72 65		nodos BYTE "Ingrese la cantidad de nodos del grafo: ", 0
	   73 65 20 6C 61
	   20 63 61 6E 74
	   69 64 61 64 20
	   64 65 20 6E 6F
	   64 6F 73 20 64
	   65 6C 20 67 72
	   61 66 6F 3A 20
	   00
 000000AD 45 72 72 6F 72		negn BYTE "Error: La cantidad de nodos no puede ser nula o negativa. Por favor introduzca de nuevo el dato.", 0
	   3A 20 4C 61 20
	   63 61 6E 74 69
	   64 61 64 20 64
	   65 20 6E 6F 64
	   6F 73 20 6E 6F
	   20 70 75 65 64
	   65 20 73 65 72
	   20 6E 75 6C 61
	   20 6F 20 6E 65
	   67 61 74 69 76
	   61 2E 20 50 6F
	   72 20 66 61 76
	   6F 72 20 69 6E
	   74 72 6F 64 75
	   7A 63 61 20 64
	   65 20 6E 75 65
	   76 6F 20 65 6C
	   20 64 61 74 6F
	   2E 00

					; Mensajes para pedir las conexiones en el grafo
 0000010E 49 6E 67 72 65		con1 BYTE "Ingrese la cantidad de conexiones del nodo ", 0
	   73 65 20 6C 61
	   20 63 61 6E 74
	   69 64 61 64 20
	   64 65 20 63 6F
	   6E 65 78 69 6F
	   6E 65 73 20 64
	   65 6C 20 6E 6F
	   64 6F 20 00
 0000013A 3A 20 00			con2 BYTE ": ", 0
 0000013D 49 6E 67 72 65		con3 BYTE "Ingrese el nodo con el que esta conectado: ", 0
	   73 65 20 65 6C
	   20 6E 6F 64 6F
	   20 63 6F 6E 20
	   65 6C 20 71 75
	   65 20 65 73 74
	   61 20 63 6F 6E
	   65 63 74 61 64
	   6F 3A 20 00
 00000169 49 6E 67 72 65		con4 BYTE "Ingrese la distancia de la conexion: ", 0
	   73 65 20 6C 61
	   20 64 69 73 74
	   61 6E 63 69 61
	   20 64 65 20 6C
	   61 20 63 6F 6E
	   65 78 69 6F 6E
	   3A 20 00
 0000018F 45 72 72 6F 72		con5 BYTE "Error: Las distancias deben ser positivas. Por favor introduzca de nuevo el dato.", 0
	   3A 20 4C 61 73
	   20 64 69 73 74
	   61 6E 63 69 61
	   73 20 64 65 62
	   65 6E 20 73 65
	   72 20 70 6F 73
	   69 74 69 76 61
	   73 2E 20 50 6F
	   72 20 66 61 76
	   6F 72 20 69 6E
	   74 72 6F 64 75
	   7A 63 61 20 64
	   65 20 6E 75 65
	   76 6F 20 65 6C
	   20 64 61 74 6F
	   2E 00
 000001E1 45 72 72 6F 72		con6 BYTE "Error: La cantidad de conexiones debe ser no-negativa. Por favor introduzca de nuevo el dato.", 0
	   3A 20 4C 61 20
	   63 61 6E 74 69
	   64 61 64 20 64
	   65 20 63 6F 6E
	   65 78 69 6F 6E
	   65 73 20 64 65
	   62 65 20 73 65
	   72 20 6E 6F 2D
	   6E 65 67 61 74
	   69 76 61 2E 20
	   50 6F 72 20 66
	   61 76 6F 72 20
	   69 6E 74 72 6F
	   64 75 7A 63 61
	   20 64 65 20 6E
	   75 65 76 6F 20
	   65 6C 20 64 61
	   74 6F 2E 00
 0000023F 45 72 72 6F 72		con7 BYTE "Error: El nodo conectado debe estar en un rango desde 1 hasta la cantidad total de nodos. Por favor introduzca de nuevo el dato.", 0
	   3A 20 45 6C 20
	   6E 6F 64 6F 20
	   63 6F 6E 65 63
	   74 61 64 6F 20
	   64 65 62 65 20
	   65 73 74 61 72
	   20 65 6E 20 75
	   6E 20 72 61 6E
	   67 6F 20 64 65
	   73 64 65 20 31
	   20 68 61 73 74
	   61 20 6C 61 20
	   63 61 6E 74 69
	   64 61 64 20 74
	   6F 74 61 6C 20
	   64 65 20 6E 6F
	   64 6F 73 2E 20
	   50 6F 72 20 66
	   61 76 6F 72 20
	   69 6E 74 72 6F
	   64 75 7A 63 61
	   20 64 65 20 6E
	   75 65 76 6F 20
	   65 6C 20 64 61
	   74 6F 2E 00

					; Mensaje para pedir el nodo inicial
 000002C0 49 6E 67 72 65		ini BYTE "Ingrese el nodo de partida: ", 0
	   73 65 20 65 6C
	   20 6E 6F 64 6F
	   20 64 65 20 70
	   61 72 74 69 64
	   61 3A 20 00

					; Mensaje para informar que la asignacion de memoria fallo
 000002DD 45 72 72 6F 72		fail BYTE "Error: La asignacion de memoria fallo.", 0
	   3A 20 4C 61 20
	   61 73 69 67 6E
	   61 63 69 6F 6E
	   20 64 65 20 6D
	   65 6D 6F 72 69
	   61 20 66 61 6C
	   6C 6F 2E 00

					; Mensajes para imprimir la tabla de distancias
 00000304 44 49 53 54 41		resul BYTE "DISTANCIAS MINIMAS", 0Dh, 0Ah,
	   4E 43 49 41 53
	   20 4D 49 4E 49
	   4D 41 53 0D 0A
	   4E 6F 74 61 3A
	   20 55 6E 61 20
	   64 69 73 74 61
	   6E 63 69 61 20
	   64 65 20 27 69
	   6E 66 27 20 69
	   6E 64 69 63 61
	   20 71 75 65 20
	   6E 6F 20 73 65
	   20 70 75 65 64
	   65 20 6C 6C 65
	   67 61 72 20 61
	   20 65 73 65 20
	   6E 6F 64 6F 20
	   64 65 73 64 65
	   20 65 6C 20 6E
	   6F 64 6F 20 64
	   65 20 70 61 72
	   74 69 64 61 0D
	   0A 00
							   "Nota: Una distancia de 'inf' indica que no se puede llegar a ese nodo desde el nodo de partida", 0Dh, 0Ah, 0
 00000379 4E 6F 64 6F 20		node BYTE "Nodo ", 0
	   00
 0000037F 69 6E 66 00			infin BYTE "inf", 0

					; Variables auxiliares para guardar datos temporalmente
 00000383 00000000			aux1 DWORD ?
 00000387 00000000			aux2 DWORD ?
 0000038B 00000000			auxF REAL4 ?

					; Cantidad de nodos del grafo
 0000038F 00000000			n DWORD ?
					
					; Cantidad total de elementos de la matriz de adyacencia
 00000393 00000000			dim DWORD ?
					
					; Numero total de bytes que ocupa la matriz de adyacencia
 00000397 00000000			siz DWORD ?
					
					; Manejador del Heap
 0000039B 00000000			hhm DWORD ?
					
					; Puntero a la matriz de adyacencia
 0000039F 00000000			grafo DWORD ?

					; Arreglo de las distancias
 000003A3 00000000			distancias DWORD ?
					
					; Arreglo para nodos visitados
 000003A7 00000000			boo DWORD ?

					; Nodo de partida
 000003AB 00000000			partida DWORD ?

					; Mensaje para la entrega de resultados
 000003AF 4E 6F 64 6F 20		res BYTE "Nodo ", 0
	   00
 000003B5 3A 09 00			p BYTE ":", 9h, 0

					; Variable para verificar si todos los nodos fueron explorados
 000003B8 00				vis BYTE ?

					; Variables para obtener el nodo con la distancia mas pequena
 000003B9 00000000			d REAL4 ?
 000003BD 00000000			x DWORD ?

 00000000			.CODE
					;------------------------------------------------------------------------------------------
 00000000				IndexarArreglo PROC USES edx,
						arreglo: DWORD,		; Apuntador al arreglo
						index: DWORD,		; Indice del elemento
						tam: DWORD			; Tamano del tipo de dato almacenado en el arreglo
					; Calcula la direccion de memoria donde se ubica un elemento en un arreglo dado su indice
					; Devuelve: esi = direccion de memoria del elemento indexado
					;------------------------------------------------------------------------------------------
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
 00000003  52		   *	    push   edx
 00000004  8B 75 08				mov esi, arreglo
						
 00000007  8B 55 0C				mov edx, index
 0000000A  0F AF 55 10				imul edx, tam
 0000000E  03 F2				add esi, edx
						
						ret
 00000010  5A		   *	    pop    edx
 00000011  C9		   *	    leave  
 00000012  C2 000C	   *	    ret    0000Ch
 00000015				IndexarArreglo ENDP

					;-------------------------------------------------------------------------------------------------------------------------
 00000015				IndexarMatriz PROC USES edx,
						matriz: DWORD,		; Apuntador a la matriz
						na: DWORD,			; Dimension de la matriz
						fila: DWORD,		; Fila del elemento
						columna: DWORD,		; Columna del elemento
						tam: DWORD			; Tamano del tipo de dato almacenado en la matriz
					; Calcula la direccion de memoria donde se ubica un elemento en una matriz dadas la fila y la columna donde esta ubicado
					; Devuelve: esi = direccion de memoria del elemento indexado
					;-------------------------------------------------------------------------------------------------------------------------
 00000015  55		   *	    push   ebp
 00000016  8B EC	   *	    mov    ebp, esp
 00000018  52		   *	    push   edx
 00000019  8B 75 08				mov esi, matriz
						
 0000001C  8B 55 14				mov edx, columna
 0000001F  0F AF 55 18				imul edx, tam
 00000023  03 F2				add esi, edx
						
 00000025  8B 55 10				mov edx, fila
 00000028  0F AF 55 0C				imul edx, na
 0000002C  0F AF 55 18				imul edx, tam
 00000030  03 F2				add esi, edx
						
						ret
 00000032  5A		   *	    pop    edx
 00000033  C9		   *	    leave  
 00000034  C2 0014	   *	    ret    00014h
 00000037				IndexarMatriz ENDP
					
 00000037				main PROC
 00000037  9B DB E3				finit
						
						; Imprimimos el mensaje de bienvenida
 0000003A  BA 00000004 R			mov edx, OFFSET bienvenida
 0000003F  E8 00000000 E			call WriteString
 00000044  E8 00000000 E			call Crlf
 00000049  E8 00000000 E			call Crlf

						; Pedimos la cantidad de nodos del grafo
 0000004E  BA 00000084 R	nn:		mov edx, OFFSET nodos
 00000053  E8 00000000 E			call WriteString
 00000058  E8 00000000 E			call ReadInt
 0000005D  E8 00000000 E			call Crlf
 00000062  83 F8 00				cmp eax, 0
 00000065  7F 11				jg gn
 00000067  BA 000000AD R				mov edx, OFFSET negn
 0000006C  E8 00000000 E				call WriteString	; Si la cantidad ingresada es negativa o nula,
 00000071  E8 00000000 E				call Crlf			; la volvemos a pedir
 00000076  EB D6					jmp nn
 00000078  A3 0000038F R	gn:		mov n, eax
						
						; Inicializamos las variables dim y siz
 0000007D  A1 0000038F R			mov eax, n
 00000082  0F AF 05				imul eax, n
	   0000038F R
 00000089  A3 00000393 R			mov dim, eax
 0000008E  6B C0 04				imul eax, TYPE REAL4
 00000091  A3 00000397 R			mov siz, eax
						
						; Preparamos el heap para guardar los datos
						invoke GetProcessHeap	; Obtenemos el manejador del heap actual, el cual es guardado en eax
 00000096  E8 00000000 E   *	    call   GetProcessHeap
 0000009B  83 F8 00				cmp eax, NULL	; Si no se obtuvo correctamente el manejador,
 0000009E  0F 84 00000416			je nAlloc		; detenemos el programa
 000000A4  A3 0000039B R			mov hhm, eax
						
						; Inicializamos la matriz de adyacencia en el heap
						invoke HeapAlloc, hhm, HEAP_ZERO_MEMORY, siz	; Asignamos dinamicamente la memoria para almacenar la matriz de adyacencia (retorna
 000000A9  FF 35 00000397 R *	    push   siz
 000000AF  6A 08	   *	    push   +000000008h
 000000B1  FF 35 0000039B R *	    push   hhm
 000000B7  E8 00000000 E   *	    call   HeapAlloc
																		; en eax un puntero al bloque de memoria), inicializando todos los valores con 0
 000000BC  83 F8 00				cmp eax, NULL	; Si no se asigno correctamente el puntero,
 000000BF  0F 84 000003F5			je nAlloc		; detenemos el programa
 000000C5  A3 0000039F R			mov grafo, eax
						
						; PEDIMOS LAS CONEXIONES DEL GRAFO
						
						; Ciclo externo, para pedir la cantidad de conexiones de cada nodo
 000000CA  BB 00000000				mov ebx, 0
 000000CF  3B 1D 0000038F R	wN:			cmp ebx, n
 000000D5  0F 8D 000000FA				jge ewN
							
 000000DB  BA 0000010E R	nc:			mov edx, OFFSET con1
 000000E0  E8 00000000 E				call WriteString
 000000E5  8B C3					mov eax, ebx
 000000E7  40						inc eax
 000000E8  E8 00000000 E				call WriteDec
 000000ED  BA 0000013A R				mov edx, OFFSET con2
 000000F2  E8 00000000 E				call WriteString
 000000F7  E8 00000000 E				call ReadInt
 000000FC  E8 00000000 E				call Crlf
 00000101  83 F8 00					cmp eax, 0
 00000104  7D 11					jge gc
 00000106  BA 000001E1 R					mov edx, OFFSET con6
 0000010B  E8 00000000 E					call WriteString	; Si la cantidad de conexiones ingresada es negativa,
 00000110  E8 00000000 E					call Crlf			; la volvemos a pedir
 00000115  EB C4						jmp nc
 00000117  A3 00000383 R	gc:			mov aux1, eax
							
							; Ciclo interno, para pedir las distancias de las conexiones de cada nodo
 0000011C  B9 00000000					mov ecx, 0
 00000121  3B 0D 00000383 R	wD:				cmp ecx, aux1
 00000127  0F 8D 000000A2					jge ewD
								
								; Pedimos el nodo con el cual esta conectado el nodo actual
 0000012D  BA 0000013D R	an:				mov edx, OFFSET con3
 00000132  E8 00000000 E					call WriteString
 00000137  E8 00000000 E					call ReadInt
 0000013C  83 F8 00						cmp eax, 0
 0000013F  7E 10						jle gnn
 00000141  3B 05 0000038F R						cmp eax, n
 00000147  7F 08							jg gnn
 00000149  48									dec eax
 0000014A  A3 00000387 R							mov aux2, eax
 0000014F  EB 11								jmp ann
 00000151  BA 0000023F R	gnn:					mov edx, OFFSET con7
 00000156  E8 00000000 E							call WriteString	; Si el nodo conectado no esta dentro del rango permitido,
 0000015B  E8 00000000 E							call Crlf			; lo volvemos a pedir
 00000160  EB CB								jmp an
 00000162			ann:			
								; Pedimos la distancia de la conexion actual
 00000162  BA 00000169 R	npos:			mov edx, OFFSET con4
 00000167  E8 00000000 E					call WriteString
 0000016C  E8 00000000 E					call ReadFloat
 00000171  E8 00000000 E					call Crlf
								
								; Revisamos que la distancia sea positiva (ya que el algoritmo de Dijkstra no funciona con distancias negativas)
 00000176  D8 15 00000000 R					fcom epsilon
 0000017C  DF E0						fnstsw ax
 0000017E  9E							sahf
 0000017F  73 11						jnb pos
 00000181  BA 0000018F R						mov edx, OFFSET con5
 00000186  E8 00000000 E						call WriteString
 0000018B  E8 00000000 E						call Crlf
 00000190  EB D0							jmp npos	; En caso de que la distancia introducida sea negativa o nula, la pedimos de nuevo
 00000192			pos:			
								; Calculamos la coordenada de la conexion en la matriz de adyacencia y la introducimos
 00000192  39 1D 00000387 R					cmp aux2, ebx
 00000198  74 2F						je equa		; Si el nodo con el que esta conectado es el mismo, ignoramos la distancia introducida
									invoke IndexarMatriz, grafo, n, ebx, aux2, TYPE REAL4
 0000019A  6A 04	   *	    push   +000000004h
 0000019C  FF 35 00000387 R *	    push   aux2
 000001A2  53		   *	    push   ebx
 000001A3  FF 35 0000038F R *	    push   n
 000001A9  FF 35 0000039F R *	    push   grafo
 000001AF  E8 FFFFFE61	   *	    call   IndexarMatriz

 000001B4  D9 06							fld REAL4 PTR [esi]
 000001B6  D8 1D 00000000 R						fcomp epsilon
 000001BC  DF E0							fnstsw ax
 000001BE  9E								sahf
 000001BF  76 06							jna si0		; Si el valor de la conexion era 0, introducimos el valor insertado por el usuario en la matriz
 000001C1  D9 06								fld REAL4 PTR [esi]
 000001C3  DF F1								fcomip st(0), st(1)
 000001C5  76 02								jna equa					; Si el valor de la conexion no era 0 y el valor insertado por el usuario es menor que
 000001C7  D9 1E		si0:						fstp REAL4 PTR [esi]	; el valor que habia en la matriz, reemplazamos el ultimo con el primero
								
 000001C9  41			equa:			inc ecx
 000001CA  E9 FFFFFF52						jmp wD
 000001CF			ewD:		
 000001CF  43						inc ebx
 000001D0  E9 FFFFFEFA					jmp wN
 000001D5			ewN:	
						; Pedimos el nodo de partida
 000001D5  BA 000002C0 R			mov edx, OFFSET ini
 000001DA  E8 00000000 E			call WriteString
 000001DF  E8 00000000 E			call ReadDec
 000001E4  48					dec eax
 000001E5  A3 000003AB R			mov partida, eax

						; Inicializamos en el heap el arreglo para almacenar las distancias de la misma manera que la matriz de adyacencia
 000001EA  8B 1D 0000038F R			mov ebx, n
 000001F0  6B DB 04				imul ebx, TYPE REAL4
						invoke HeapAlloc, hhm, HEAP_ZERO_MEMORY, ebx
 000001F3  53		   *	    push   ebx
 000001F4  6A 08	   *	    push   +000000008h
 000001F6  FF 35 0000039B R *	    push   hhm
 000001FC  E8 00000000 E   *	    call   HeapAlloc
 00000201  83 F8 00				cmp eax, NULL
 00000204  0F 84 000002B0			je nAlloc
 0000020A  A3 000003A3 R			mov distancias, eax

						; Inicializamos en el heap un arreglo para comprobar en el algoritmo los nodos que ya han sido visitados
 0000020F  8B 1D 0000038F R			mov ebx, n
 00000215  6B DB 01				imul ebx, TYPE BYTE
						invoke HeapAlloc, hhm, HEAP_ZERO_MEMORY, ebx
 00000218  53		   *	    push   ebx
 00000219  6A 08	   *	    push   +000000008h
 0000021B  FF 35 0000039B R *	    push   hhm
 00000221  E8 00000000 E   *	    call   HeapAlloc
 00000226  83 F8 00				cmp eax, NULL
 00000229  0F 84 0000028B			je nAlloc
 0000022F  A3 000003A7 R			mov boo, eax
						
						; Para cada nodo del grafo, inicializamos las distancias iniciales
 00000234  B9 00000000				mov ecx, 0
 00000239  3B 0D 0000038F R	wInit:	cmp ecx, n
 0000023F  7D 47				jge ewInit
							invoke IndexarArreglo, distancias, ecx, TYPE REAL4
 00000241  6A 04	   *	    push   +000000004h
 00000243  51		   *	    push   ecx
 00000244  FF 35 000003A3 R *	    push   distancias
 0000024A  E8 FFFFFDB1	   *	    call   IndexarArreglo
 0000024F  8B FE					mov edi, esi
							invoke IndexarMatriz, grafo, n, partida, ecx, TYPE REAL4
 00000251  6A 04	   *	    push   +000000004h
 00000253  51		   *	    push   ecx
 00000254  FF 35 000003AB R *	    push   partida
 0000025A  FF 35 0000038F R *	    push   n
 00000260  FF 35 0000039F R *	    push   grafo
 00000266  E8 FFFFFDAA	   *	    call   IndexarMatriz

 0000026B  D9 06					fld REAL4 PTR [esi]
 0000026D  D8 1D 00000000 R				fcomp epsilon
 00000273  DF E0					fnstsw ax
 00000275  9E						sahf
 00000276  76 06					jna if0
 00000278  D9 06						fld REAL4 PTR [esi]		; Si existe conexion entre el nodo inicial y el nodo actual,
 0000027A  D9 1F						fstp REAL4 PTR [edi]	; hacemos la distancia inicial del nodo actual igual a la distancia de dicha conexion
 0000027C  EB 07						jmp el0
 0000027E  68 7F800000		if0:			push 7F800000h			; Si no existe conexion entre los nodos,
 00000283  8F 07						pop REAL4 PTR [edi]		; la distancia inicial es igual a infinito
 00000285			el0:		
 00000285  41						inc ecx
 00000286  EB B1					jmp wInit
 00000288			ewInit:	
						; Inicializamos la distancia minima del nodo inicial en 0
						invoke IndexarArreglo, distancias, partida, TYPE REAL4
 00000288  6A 04	   *	    push   +000000004h
 0000028A  FF 35 000003AB R *	    push   partida
 00000290  FF 35 000003A3 R *	    push   distancias
 00000296  E8 FFFFFD65	   *	    call   IndexarArreglo
 0000029B  C7 05 00000383 R			mov aux1, 0
	   00000000
 000002A5  DB 05 00000383 R			fild aux1
 000002AB  D9 1E				fstp REAL4 PTR [esi]

						; Marcamos como visitado el nodo inicial
						invoke IndexarArreglo, boo, partida, TYPE BYTE
 000002AD  6A 01	   *	    push   +000000001h
 000002AF  FF 35 000003AB R *	    push   partida
 000002B5  FF 35 000003A7 R *	    push   boo
 000002BB  E8 FFFFFD40	   *	    call   IndexarArreglo
 000002C0  6A 01				push 1
 000002C2  8F 06				pop [esi]

 000002C4  C6 05 000003B8 R	wMin:	mov vis, 1
	   01

						; Iteramos para verificar si todos los nodos estan explorados
 000002CB  BB 00000000				mov ebx, 0
 000002D0  3B 1D 0000038F R	wVis:	cmp ebx, n
 000002D6  7D 20				jge ewVis
							invoke IndexarArreglo, boo, ebx, TYPE BYTE
 000002D8  6A 01	   *	    push   +000000001h
 000002DA  53		   *	    push   ebx
 000002DB  FF 35 000003A7 R *	    push   boo
 000002E1  E8 FFFFFD1A	   *	    call   IndexarArreglo
 000002E6  8A 06					mov al, BYTE PTR [esi]
 000002E8  3C 00					cmp al, 0
 000002EA  75 09					jnz brv
 000002EC  C6 05 000003B8 R					mov vis, 0	; El momento en el que encontremos un nodo no-explorado,
	   00
 000002F3  EB 03						jmp ewVis	; detenemos el ciclo

 000002F5  43			brv:			inc ebx
 000002F6  EB D8						jmp wVis
 000002F8			ewVis:
						; Si aun no se han explorado todos los nodos, calculamos las distancias minimas para esta iteracion
 000002F8  80 3D 000003B8 R			cmp vis, 0
	   00
 000002FF  0F 85 000000E6			jnz emin
 00000305  C7 05 000003B9 R				mov d, 7F800000h
	   7F800000

							; Seleccionamos el nodo no-explorado con la distancia minima (lo denominamos nodo minimo)
 0000030F  B9 00000000					mov ecx, 0
 00000314  3B 0D 0000038F R	exp:		cmp ecx, n
 0000031A  7D 42					jge eexp
								invoke IndexarArreglo, distancias, ecx, TYPE REAL4
 0000031C  6A 04	   *	    push   +000000004h
 0000031E  51		   *	    push   ecx
 0000031F  FF 35 000003A3 R *	    push   distancias
 00000325  E8 FFFFFCD6	   *	    call   IndexarArreglo
 0000032A  8B FE						mov edi, esi
								invoke IndexarArreglo, boo, ecx, TYPE BYTE
 0000032C  6A 01	   *	    push   +000000001h
 0000032E  51		   *	    push   ecx
 0000032F  FF 35 000003A7 R *	    push   boo
 00000335  E8 FFFFFCC6	   *	    call   IndexarArreglo
 0000033A  8A 06						mov al, BYTE PTR [esi]
 0000033C  3C 00						cmp al, 0
 0000033E  75 1B						jnz nd
 00000340  D9 07							fld REAL4 PTR [edi]
 00000342  D8 1D 000003B9 R						fcomp d
 00000348  DF E0							fnstsw ax
 0000034A  9E								sahf
 0000034B  77 0E							jnbe nd
 0000034D  D9 07								fld REAL4 PTR [edi]		; Si el nodo no esta explorado y su distancia es menor que la distancia minima encontrada
 0000034F  D9 1D 000003B9 R							fstp d					; hasta el momento, designamos este como el nodo minimo
 00000355  89 0D 000003BD R							mov x, ecx

 0000035B  41			nd:					inc ecx
 0000035C  EB B6							jmp exp
 0000035E			eexp:
							; Marcamos el nodo obtenido como explorado
							invoke IndexarArreglo, boo, x, TYPE BYTE
 0000035E  6A 01	   *	    push   +000000001h
 00000360  FF 35 000003BD R *	    push   x
 00000366  FF 35 000003A7 R *	    push   boo
 0000036C  E8 FFFFFC8F	   *	    call   IndexarArreglo
 00000371  6A 01					push 1
 00000373  8F 06					pop [esi]
							
							; Iteramos a traves de las conexiones del nodo
 00000375  B9 00000000					mov ecx, 0
 0000037A  3B 0D 0000038F R	wfD:		cmp ecx, n
 00000380  7D 64					jge ewfD
								invoke IndexarMatriz, grafo, n, x, ecx, TYPE REAL4
 00000382  6A 04	   *	    push   +000000004h
 00000384  51		   *	    push   ecx
 00000385  FF 35 000003BD R *	    push   x
 0000038B  FF 35 0000038F R *	    push   n
 00000391  FF 35 0000039F R *	    push   grafo
 00000397  E8 FFFFFC79	   *	    call   IndexarMatriz
 0000039C  D9 06						fld REAL4 PTR [esi]
 0000039E  D8 1D 00000000 R					fcomp epsilon
 000003A4  DF E0						fnstsw ax
 000003A6  9E							sahf
 000003A7  76 3A						jna is0
 000003A9  D9 06							fld REAL4 PTR [esi]
									invoke IndexarArreglo, distancias, x, TYPE REAL4
 000003AB  6A 04	   *	    push   +000000004h
 000003AD  FF 35 000003BD R *	    push   x
 000003B3  FF 35 000003A3 R *	    push   distancias
 000003B9  E8 FFFFFC42	   *	    call   IndexarArreglo
 000003BE  D8 06							fadd REAL4 PTR [esi]
 000003C0  D9 15 0000038B R						fst auxF
									invoke IndexarArreglo, distancias, ecx, TYPE REAL4
 000003C6  6A 04	   *	    push   +000000004h
 000003C8  51		   *	    push   ecx
 000003C9  FF 35 000003A3 R *	    push   distancias
 000003CF  E8 FFFFFC2C	   *	    call   IndexarArreglo
 000003D4  D8 1E							fcomp REAL4 PTR [esi]
 000003D6  DF E0							fnstsw ax
 000003D8  9E								sahf
 000003D9  73 08							jnb is0
 000003DB  D9 05 0000038B R							fld auxF				; Si la distancia del nodo minimo sumada con la distancia de su conexion con el nodo actual
 000003E1  D9 1E								fstp REAL4 PTR [esi]	; es menor que la distancia del nodo actual, hacemos el ultimo valor igual al primero
 000003E3			is0:				
 000003E3  41							inc ecx
 000003E4  EB 94						jmp wfD
 000003E6			ewfD:
 000003E6  E9 FFFFFED9					jmp wMin
 000003EB			emin:
						; Iteramos a traves del arreglo de distancias e imprimimos cada una
 000003EB  E8 00000000 E			call Crlf
 000003F0  BA 00000304 R			mov edx, OFFSET resul
 000003F5  E8 00000000 E			call WriteString
 000003FA  E8 00000000 E			call Crlf

 000003FF  B9 00000000				mov ecx, 0
 00000404  3B 0D 0000038F R	wpr:	cmp ecx, n
 0000040A  7D 6E				jge ewpr
							; Imprimimos el nodo al cual pertenece la distancia
 0000040C  BA 00000379 R				mov edx, OFFSET node
 00000411  E8 00000000 E				call WriteString
 00000416  8B C1					mov eax, ecx
 00000418  40						inc eax
 00000419  E8 00000000 E				call WriteDec
 0000041E  B0 3A					mov al, ':'
 00000420  E8 00000000 E				call WriteChar
 00000425  B0 09					mov al, 9h
 00000427  E8 00000000 E				call WriteChar
 0000042C  E8 00000000 E				call WriteChar

							; Imprimimos la distancia como tal
 00000431  C7 05 0000038B R				mov auxF, 7F800000h
	   7F800000
							invoke IndexarArreglo, distancias, ecx, TYPE REAL4
 0000043B  6A 04	   *	    push   +000000004h
 0000043D  51		   *	    push   ecx
 0000043E  FF 35 000003A3 R *	    push   distancias
 00000444  E8 FFFFFBB7	   *	    call   IndexarArreglo
 00000449  D9 06					fld REAL4 PTR[esi]
 0000044B  D8 15 0000038B R				fcom auxF
 00000451  DF E0					fnstsw ax
 00000453  9E						sahf
 00000454  75 11					jne inf
 00000456  BA 0000037F R					mov edx, OFFSET infin
 0000045B  E8 00000000 E					call WriteString	; Si la distancia del nodo es infinito, no se puede llegar a el desde el nodo de partida dado,
 00000460  E8 00000000 E					call Crlf			; entonces imprimimos 'inf'
 00000465  EB 10						jmp ninf
 00000467  E8 00000000 E	inf:			call WriteFloat		; Si la distancia del nodo no es infinito,
 0000046C  D9 1D 0000038B R					fstp auxF			; la imprimimos
 00000472  E8 00000000 E					call Crlf
 00000477			ninf:
 00000477  41						inc ecx
 00000478  EB 8A					jmp wpr
 0000047A			ewpr:
 0000047A  E8 00000000 E			call Crlf

						; Si el programa termina con exito, liberamos la memoria ocupada por la matriz y los arreglos
						invoke HeapFree, hhm, 0, grafo
 0000047F  FF 35 0000039F R *	    push   grafo
 00000485  6A 00	   *	    push   +000000000h
 00000487  FF 35 0000039B R *	    push   hhm
 0000048D  E8 00000000 E   *	    call   HeapFree
						invoke HeapFree, hhm, 0, distancias
 00000492  FF 35 000003A3 R *	    push   distancias
 00000498  6A 00	   *	    push   +000000000h
 0000049A  FF 35 0000039B R *	    push   hhm
 000004A0  E8 00000000 E   *	    call   HeapFree
						invoke HeapFree, hhm, 0, boo
 000004A5  FF 35 000003A7 R *	    push   boo
 000004AB  6A 00	   *	    push   +000000000h
 000004AD  FF 35 0000039B R *	    push   hhm
 000004B3  E8 00000000 E   *	    call   HeapFree
 000004B8  EB 0A				jmp en
						
						; En caso de que la asignacion de memoria fallase, le informamos al usuario
 000004BA  BA 000002DD R	nAlloc:	mov edx, OFFSET fail
 000004BF  E8 00000000 E			call WriteString
						
 000004C4			en:		
						exit
 000004C4  6A 00	   *	    push   +000000000h
 000004C6  E8 00000000 E   *	    call   ExitProcess
 000004CB				main ENDP
					END main
Microsoft (R) Macro Assembler Version 14.11.25547.0	    11/16/17 10:27:24
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000003C1 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000004CB Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IndexarArreglo . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000015 Public STDCALL
  arreglo  . . . . . . . . . . .	DWord	 bp + 00000008
  index  . . . . . . . . . . . .	DWord	 bp + 0000000C
  tam  . . . . . . . . . . . . .	DWord	 bp + 00000010
IndexarMatriz  . . . . . . . . .	P Near	 00000015 _TEXT	Length= 00000022 Public STDCALL
  matriz . . . . . . . . . . . .	DWord	 bp + 00000008
  na . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  fila . . . . . . . . . . . . .	DWord	 bp + 00000010
  columna  . . . . . . . . . . .	DWord	 bp + 00000014
  tam  . . . . . . . . . . . . .	DWord	 bp + 00000018
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000037 _TEXT	Length= 00000494 Public STDCALL
  nn . . . . . . . . . . . . . .	L Near	 0000004E _TEXT	
  gn . . . . . . . . . . . . . .	L Near	 00000078 _TEXT	
  wN . . . . . . . . . . . . . .	L Near	 000000CF _TEXT	
  nc . . . . . . . . . . . . . .	L Near	 000000DB _TEXT	
  gc . . . . . . . . . . . . . .	L Near	 00000117 _TEXT	
  wD . . . . . . . . . . . . . .	L Near	 00000121 _TEXT	
  an . . . . . . . . . . . . . .	L Near	 0000012D _TEXT	
  gnn  . . . . . . . . . . . . .	L Near	 00000151 _TEXT	
  ann  . . . . . . . . . . . . .	L Near	 00000162 _TEXT	
  npos . . . . . . . . . . . . .	L Near	 00000162 _TEXT	
  pos  . . . . . . . . . . . . .	L Near	 00000192 _TEXT	
  si0  . . . . . . . . . . . . .	L Near	 000001C7 _TEXT	
  equa . . . . . . . . . . . . .	L Near	 000001C9 _TEXT	
  ewD  . . . . . . . . . . . . .	L Near	 000001CF _TEXT	
  ewN  . . . . . . . . . . . . .	L Near	 000001D5 _TEXT	
  wInit  . . . . . . . . . . . .	L Near	 00000239 _TEXT	
  if0  . . . . . . . . . . . . .	L Near	 0000027E _TEXT	
  el0  . . . . . . . . . . . . .	L Near	 00000285 _TEXT	
  ewInit . . . . . . . . . . . .	L Near	 00000288 _TEXT	
  wMin . . . . . . . . . . . . .	L Near	 000002C4 _TEXT	
  wVis . . . . . . . . . . . . .	L Near	 000002D0 _TEXT	
  brv  . . . . . . . . . . . . .	L Near	 000002F5 _TEXT	
  ewVis  . . . . . . . . . . . .	L Near	 000002F8 _TEXT	
  exp  . . . . . . . . . . . . .	L Near	 00000314 _TEXT	
  nd . . . . . . . . . . . . . .	L Near	 0000035B _TEXT	
  eexp . . . . . . . . . . . . .	L Near	 0000035E _TEXT	
  wfD  . . . . . . . . . . . . .	L Near	 0000037A _TEXT	
  is0  . . . . . . . . . . . . .	L Near	 000003E3 _TEXT	
  ewfD . . . . . . . . . . . . .	L Near	 000003E6 _TEXT	
  emin . . . . . . . . . . . . .	L Near	 000003EB _TEXT	
  wpr  . . . . . . . . . . . . .	L Near	 00000404 _TEXT	
  inf  . . . . . . . . . . . . .	L Near	 00000467 _TEXT	
  ninf . . . . . . . . . . . . .	L Near	 00000477 _TEXT	
  ewpr . . . . . . . . . . . . .	L Near	 0000047A _TEXT	
  nAlloc . . . . . . . . . . . .	L Near	 000004BA _TEXT	
  en . . . . . . . . . . . . . .	L Near	 000004C4 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
aux1 . . . . . . . . . . . . . .	DWord	 00000383 _DATA	
aux2 . . . . . . . . . . . . . .	DWord	 00000387 _DATA	
auxF . . . . . . . . . . . . . .	DWord	 0000038B _DATA	
bienvenida . . . . . . . . . . .	Byte	 00000004 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
boo  . . . . . . . . . . . . . .	DWord	 000003A7 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
con1 . . . . . . . . . . . . . .	Byte	 0000010E _DATA	
con2 . . . . . . . . . . . . . .	Byte	 0000013A _DATA	
con3 . . . . . . . . . . . . . .	Byte	 0000013D _DATA	
con4 . . . . . . . . . . . . . .	Byte	 00000169 _DATA	
con5 . . . . . . . . . . . . . .	Byte	 0000018F _DATA	
con6 . . . . . . . . . . . . . .	Byte	 000001E1 _DATA	
con7 . . . . . . . . . . . . . .	Byte	 0000023F _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dim  . . . . . . . . . . . . . .	DWord	 00000393 _DATA	
distancias . . . . . . . . . . .	DWord	 000003A3 _DATA	
d  . . . . . . . . . . . . . . .	DWord	 000003B9 _DATA	
epsilon  . . . . . . . . . . . .	DWord	 00000000 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fail . . . . . . . . . . . . . .	Byte	 000002DD _DATA	
grafo  . . . . . . . . . . . . .	DWord	 0000039F _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hhm  . . . . . . . . . . . . . .	DWord	 0000039B _DATA	
infin  . . . . . . . . . . . . .	Byte	 0000037F _DATA	
ini  . . . . . . . . . . . . . .	Byte	 000002C0 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
negn . . . . . . . . . . . . . .	Byte	 000000AD _DATA	
node . . . . . . . . . . . . . .	Byte	 00000379 _DATA	
nodos  . . . . . . . . . . . . .	Byte	 00000084 _DATA	
n  . . . . . . . . . . . . . . .	DWord	 0000038F _DATA	
partida  . . . . . . . . . . . .	DWord	 000003AB _DATA	
p  . . . . . . . . . . . . . . .	Byte	 000003B5 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
resul  . . . . . . . . . . . . .	Byte	 00000304 _DATA	
res  . . . . . . . . . . . . . .	Byte	 000003AF _DATA	
siz  . . . . . . . . . . . . . .	DWord	 00000397 _DATA	
vis  . . . . . . . . . . . . . .	Byte	 000003B8 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
x  . . . . . . . . . . . . . . .	DWord	 000003BD _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
