Microsoft (R) Macro Assembler Version 14.11.25547.0	    11/10/17 15:21:43
main.asm						     Page 1 - 1


				; PROYECTO DE LENGUAJE ENSAMBLADOR
				; ARQUITECTURA DE COMPUTADORES, SEMESTRE 2017-II
				; Integrantes: Kewin Evers Yagari, Daniel Sanchez Buitrago, Daniel Velez Santamaria
				; Docente: Hugo de Jesus Mesa Yepes

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.DATA
					; Mensaje de bienvenida para el programa
 00000000 42 49 45 4E 56		bienvenida BYTE "BIENVENIDO USUARIO", 0dh, 0ah,
	   45 4E 49 44 4F
	   20 55 53 55 41
	   52 49 4F 0D 0A
	   45 73 74 65 20
	   70 72 6F 67 72
	   61 6D 61 20 63
	   61 6C 63 75 6C
	   61 20 65 6C 20
	   63 61 6D 69 6E
	   6F 20 6D 61 73
	   20 63 6F 72 74
	   6F 20 65 6E 20
	   75 6E 20 67 72
	   61 66 6F 20 64
	   65 73 64 65 20
	   65 6C 20 6E 6F
	   64 6F 20 64 65
	   20 70 61 72 74
	   69 64 61 20 68
	   61 73 74 61 20
	   74 6F 64 6F 73
	   20 6C 6F 73 20
	   64 65 6D 61 73
	   20 6E 6F 64 6F
	   73 2E 00
									"Este programa calcula el camino mas corto en un grafo desde el nodo de partida hasta todos los demas nodos.", 0

					; Mensaje para pedir la cantidad de nodos
 00000080 49 6E 67 72 65		nodos BYTE "Ingrese la cantidad de nodos del grafo: ", 0
	   73 65 20 6C 61
	   20 63 61 6E 74
	   69 64 61 64 20
	   64 65 20 6E 6F
	   64 6F 73 20 64
	   65 6C 20 67 72
	   61 66 6F 3A 20
	   00

					; Mensajes para pedir las conexiones en el grafo
 000000A9 49 6E 67 72 65		con1 BYTE "Ingrese la cantidad de conexiones del nodo ", 0
	   73 65 20 6C 61
	   20 63 61 6E 74
	   69 64 61 64 20
	   64 65 20 63 6F
	   6E 65 78 69 6F
	   6E 65 73 20 64
	   65 6C 20 6E 6F
	   64 6F 20 00
 000000D5 3A 20 00			con2 BYTE ": ", 0
 000000D8 49 6E 67 72 65		con3 BYTE "Ingrese el nodo con el que esta conectado: ", 0
	   73 65 20 65 6C
	   20 6E 6F 64 6F
	   20 63 6F 6E 20
	   65 6C 20 71 75
	   65 20 65 73 74
	   61 20 63 6F 6E
	   65 63 74 61 64
	   6F 3A 20 00
 00000104 49 6E 67 72 65		con4 BYTE "Ingrese la distancia de la conexion: ", 0
	   73 65 20 6C 61
	   20 64 69 73 74
	   61 6E 63 69 61
	   20 64 65 20 6C
	   61 20 63 6F 6E
	   65 78 69 6F 6E
	   3A 20 00

					; Mensaje para pedir el nodo inicial
 0000012A 49 6E 67 72 65		ini BYTE "Ingrese el nodo de partida: ", 0
	   73 65 20 65 6C
	   20 6E 6F 64 6F
	   20 64 65 20 70
	   61 72 74 69 64
	   61 3A 20 00

					; Mensaje para informar que la asignacion de memoria fallo
 00000147 45 72 72 6F 72		fail BYTE "Error: La asignacion de memoria fallo.", 0
	   3A 20 4C 61 20
	   61 73 69 67 6E
	   61 63 69 6F 6E
	   20 64 65 20 6D
	   65 6D 6F 72 69
	   61 20 66 61 6C
	   6C 6F 2E 00

					; Variables auxiliares para guardar datos temporalmente
 0000016E 00000000			aux1 DWORD ?
 00000172 00000000			aux2 DWORD ?
 00000176 00000000			auxF REAL4 ?

					; Cantidad de nodos del grafo
 0000017A 00000000			n DWORD ?
					
					; Cantidad total de elementos de la matriz de adyacencia
 0000017E 00000000			dim DWORD ?
					
					; Numero total de bytes que ocupa la matriz de adyacencia
 00000182 00000000			siz DWORD ?
					
					; Manejador del Heap
 00000186 00000000			hhm DWORD ?
					
					; Puntero a la matriz de adyacencia
 0000018A 00000000			grafo DWORD ?

					; Arreglo de las distancias
 0000018E 00000000			distancias DWORD ?
					
					; Arreglo para nodos visitados
 00000192 00000000			boo DWORD ?

					; Nodo de partida
 00000196 00000000			partida DWORD ?

					; Mensaje para la entrega de resultados
 0000019A 4E 6F 64 6F 20		res BYTE "Nodo ", 0
	   00
 000001A0 3A 09 00			p BYTE ":", 9h, 0

 00000000			.CODE
					;------------------------------------------------------------------------------------------
 00000000				IndexarArreglo PROC USES edx,
						arreglo: DWORD,		; Apuntador al arreglo
						index: DWORD,		; Indice del elemento
						tam: DWORD			; Tamano del tipo de dato almacenado en el arreglo
					; Calcula la direccion de memoria donde se ubica un elemento en un arreglo dado su indice
					; Devuelve: esi = direccion de memoria del elemento indexado
					;------------------------------------------------------------------------------------------
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
 00000003  52		   *	    push   edx
 00000004  8B 75 08				mov esi, arreglo
						
 00000007  8B 55 0C				mov edx, index
 0000000A  0F AF 55 10				imul edx, tam
 0000000E  03 F2				add esi, edx
						
						ret
 00000010  5A		   *	    pop    edx
 00000011  C9		   *	    leave  
 00000012  C2 000C	   *	    ret    0000Ch
 00000015				IndexarArreglo ENDP

					;-------------------------------------------------------------------------------------------------------------------------
 00000015				IndexarMatriz PROC USES edx,
						matriz: DWORD,		; Apuntador a la matriz
						na: DWORD,			; Dimension de la matriz
						fila: DWORD,		; Fila del elemento
						columna: DWORD,		; Columna del elemento
						tam: DWORD			; Tamano del tipo de dato almacenado en la matriz
					; Calcula la direccion de memoria donde se ubica un elemento en una matriz dadas la fila y la columna donde esta ubicado
					; Devuelve: esi = direccion de memoria del elemento indexado
					;-------------------------------------------------------------------------------------------------------------------------
 00000015  55		   *	    push   ebp
 00000016  8B EC	   *	    mov    ebp, esp
 00000018  52		   *	    push   edx
 00000019  8B 75 08				mov esi, matriz
						
 0000001C  8B 55 14				mov edx, columna
 0000001F  0F AF 55 18				imul edx, tam
 00000023  03 F2				add esi, edx
						
 00000025  8B 55 10				mov edx, fila
 00000028  0F AF 55 0C				imul edx, na
 0000002C  0F AF 55 18				imul edx, tam
 00000030  03 F2				add esi, edx
						
						ret
 00000032  5A		   *	    pop    edx
 00000033  C9		   *	    leave  
 00000034  C2 0014	   *	    ret    00014h
 00000037				IndexarMatriz ENDP
					
					;------------------------------------------------------------------------------------------
 00000037				CompararFlotantes PROC USES ax,
						fc1: REAL4,		; Valor del lado izquierdo de la comparacion
						fc2: REAL4		; Valor del lado derecho de la comparacion
					; Compara dos valores de punto flotante y refleja el resultado en el registro de banderas
					; Devuelve: Resultado de la comparacion en eflags
					;------------------------------------------------------------------------------------------
 00000037  55		   *	    push   ebp
 00000038  8B EC	   *	    mov    ebp, esp
 0000003A  66| 50	   *	    push   ax
 0000003C  D9 45 08				fld fc1
 0000003F  D8 5D 0C				fcomp fc2
 00000042  DF E0				fnstsw ax
 00000044  9E					sahf
 00000045				CompararFlotantes ENDP
main.asm(114) : warning A6001:no return from procedure

					;----------------------------------------------------------------------------------------------------------------------------
 00000045				Dijkstra PROC USES eax ebx ecx esi edi,
						graph: DWORD,	; Apuntador a la matriz de adyacencia
						no: DWORD,		; Numero de nodos
						dists: DWORD,	; Apuntador al arreglo de distancias
						conf: DWORD,	; Apuntador al arreglo de visitados
						start: DWORD	; Numero del nodo incial
					; Calcula los caminos mas cortos en un grafo desde el nodo de partida al resto de los nodos usando el algoritmo de Dijkstra
					; Devuelve: Caminos mas cortos a cada nodo en el arreglo de distancias
					;----------------------------------------------------------------------------------------------------------------------------
						LOCAL vis: BYTE,	; Variable local para verificar si todos los nodos fueron explorados
							x: DWORD,		; Variable local para obtener el nodo con la distancia mas pequena
							d: REAL4,		; Variable local para obtener la distancia mas pequena
							auxC: REAL4		; Variable local para almacenar temporalmente valores reales

						; Para cada nodo del grafo, inicializamos las distancias iniciales
 00000045  55		   *	    push   ebp
 00000046  8B EC	   *	    mov    ebp, esp
 00000048  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 0000004B  50		   *	    push   eax
 0000004C  53		   *	    push   ebx
 0000004D  51		   *	    push   ecx
 0000004E  56		   *	    push   esi
 0000004F  57		   *	    push   edi
 00000050  B9 00000000				mov ecx, 0
 00000055  3B 0D 0000017A R	wInit:	cmp ecx, n
 0000005B  7D 34				jge ewInit
							
							invoke IndexarMatriz, graph, no, start, ecx, TYPE REAL4
 0000005D  6A 04	   *	    push   +000000004h
 0000005F  51		   *	    push   ecx
 00000060  FF 75 18	   *	    push   dword  ptr ss:[ebp]+000000018h
 00000063  FF 75 0C	   *	    push   dword  ptr ss:[ebp]+00000000Ch
 00000066  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000069  E8 FFFFFFA7	   *	    call   IndexarMatriz

 0000006E  C7 45 F0					mov auxC, 0
	   00000000
							invoke CompararFlotantes, REAL4 PTR [esi], auxC
 00000075  FF 75 F0	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF0h
 00000078  FF 36	   *	    push   dword  ptr [esi]
 0000007A  E8 FFFFFFB8	   *	    call   CompararFlotantes
 0000007F  74 06					je if0
 00000081  FF 36						push [esi]	; Si existe conexion entre el nodo inicial y el nodo actual,
 00000083  8F 07						pop [edi]	; hacemos la distancia inicial igual a la distancia de su conexion
 00000085  EB 07						jmp e0
 00000087  68 7F800000		if0:			push 7F800000h	; Si no existe conexion entre los nodos,
 0000008C  8F 07						pop [edi]		; la distancia inicial es igual a infinito
 0000008E			e0:			
 0000008E  41						inc ecx
 0000008F  EB C4					jmp wInit
 00000091			ewInit:	
						; Inicializamos la distancia minima del nodo inicial en 0
						invoke IndexarArreglo, dists, start, TYPE REAL4
 00000091  6A 04	   *	    push   +000000004h
 00000093  FF 75 18	   *	    push   dword  ptr ss:[ebp]+000000018h
 00000096  FF 75 10	   *	    push   dword  ptr ss:[ebp]+000000010h
 00000099  E8 FFFFFF62	   *	    call   IndexarArreglo
 0000009E  6A 00				push 0
 000000A0  8F 06				pop [esi]
						
						; Marcamos como visitado el nodo inicial
						invoke IndexarArreglo, conf, start, TYPE BYTE
 000000A2  6A 01	   *	    push   +000000001h
 000000A4  FF 75 18	   *	    push   dword  ptr ss:[ebp]+000000018h
 000000A7  FF 75 14	   *	    push   dword  ptr ss:[ebp]+000000014h
 000000AA  E8 FFFFFF51	   *	    call   IndexarArreglo
 000000AF  6A 01				push 1
 000000B1  8F 06				pop [esi]

 000000B3  C6 45 FF 01		wMin:	mov vis, 1
						
						; Iteramos para verificar si todos los nodos estan explorados
 000000B7  BB 00000000				mov ebx, 0
 000000BC  3B 1D 0000017A R	wVis:	cmp ebx, n
 000000C2  7D 1A				jge ewVis
							invoke IndexarArreglo, conf, ebx, TYPE BYTE
 000000C4  6A 01	   *	    push   +000000001h
 000000C6  53		   *	    push   ebx
 000000C7  FF 75 14	   *	    push   dword  ptr ss:[ebp]+000000014h
 000000CA  E8 FFFFFF31	   *	    call   IndexarArreglo
 000000CF  8A 06					mov al, [esi]
 000000D1  3C 00					cmp al, 0
 000000D3  75 06					jne brv
 000000D5  C6 45 FF 00						mov vis, 0
 000000D9  EB 03						jmp ewVis
 000000DB  43			brv:			inc ebx
 000000DC  EB DE						jmp wVis
 000000DE			ewVis: 
						; Si aun no se han explorado todos los nodos, calculamos las distancias minimas para esta iteracion
 000000DE  80 7D FF 00				cmp vis, 0
 000000E2  0F 85 000000B0			jne emin
 000000E8  C7 45 F4					mov d, 7F800000h
	   7F800000
							
							; Seleccionamos el nodo no-explorado con la distancia minima
 000000EF  B9 00000000					mov ecx, 0
 000000F4  3B 0D 0000017A R	exp:		cmp ecx, n
 000000FA  7D 35					jge eexp
								invoke IndexarArreglo, dists, ecx, TYPE REAL4
 000000FC  6A 04	   *	    push   +000000004h
 000000FE  51		   *	    push   ecx
 000000FF  FF 75 10	   *	    push   dword  ptr ss:[ebp]+000000010h
 00000102  E8 FFFFFEF9	   *	    call   IndexarArreglo
 00000107  8B FE						mov edi, esi
								invoke IndexarArreglo, conf, ecx, TYPE BYTE
 00000109  6A 01	   *	    push   +000000001h
 0000010B  51		   *	    push   ecx
 0000010C  FF 75 14	   *	    push   dword  ptr ss:[ebp]+000000014h
 0000010F  E8 FFFFFEEC	   *	    call   IndexarArreglo
 00000114  8A 06						mov al, [esi]
 00000116  3C 00						cmp al, 0
 00000118  75 14						jne nd
									invoke CompararFlotantes, REAL4 PTR [edi], d
 0000011A  FF 75 F4	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF4h
 0000011D  FF 37	   *	    push   dword  ptr [edi]
 0000011F  E8 FFFFFF13	   *	    call   CompararFlotantes
 00000124  73 08							jnb nd
 00000126  FF 37								push [edi]
 00000128  8F 45 F4								pop d
 0000012B  89 4D F8								mov x, ecx
 0000012E  41			nd:				inc ecx
 0000012F  EB C3						jmp exp
 00000131			eexp:
							; Marcamos el nodo obtenido como explorado
							invoke IndexarArreglo, conf, x, TYPE BYTE
 00000131  6A 01	   *	    push   +000000001h
 00000133  FF 75 F8	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF8h
 00000136  FF 75 14	   *	    push   dword  ptr ss:[ebp]+000000014h
 00000139  E8 FFFFFEC2	   *	    call   IndexarArreglo
 0000013E  6A 01					push 1
 00000140  8F 06					pop [esi]
							
							; Iteramos a traves de las conexiones del nodo
 00000142  B9 00000000					mov ecx, 0
 00000147  3B 0D 0000017A R	wfD:		cmp ecx, n
 0000014D  7D 44					jge ewfD
								invoke IndexarMatriz, graph, no, x, ecx, TYPE REAL4
 0000014F  6A 04	   *	    push   +000000004h
 00000151  51		   *	    push   ecx
 00000152  FF 75 F8	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF8h
 00000155  FF 75 0C	   *	    push   dword  ptr ss:[ebp]+00000000Ch
 00000158  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000015B  E8 FFFFFEB5	   *	    call   IndexarMatriz
 00000160  D9 06						fld REAL4 PTR [esi]
								invoke IndexarArreglo, dists, x, TYPE REAL4
 00000162  6A 04	   *	    push   +000000004h
 00000164  FF 75 F8	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF8h
 00000167  FF 75 10	   *	    push   dword  ptr ss:[ebp]+000000010h
 0000016A  E8 FFFFFE91	   *	    call   IndexarArreglo
 0000016F  D8 06						fadd REAL4 PTR [esi]
 00000171  D9 5D F0						fstp auxC
								invoke IndexarArreglo, dists, ecx, TYPE REAL4
 00000174  6A 04	   *	    push   +000000004h
 00000176  51		   *	    push   ecx
 00000177  FF 75 10	   *	    push   dword  ptr ss:[ebp]+000000010h
 0000017A  E8 FFFFFE81	   *	    call   IndexarArreglo
								invoke CompararFlotantes, auxC, REAL4 PTR [esi]
 0000017F  FF 36	   *	    push   dword  ptr [esi]
 00000181  FF 75 F0	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF0h
 00000184  E8 FFFFFEAE	   *	    call   CompararFlotantes
 00000189  73 05						jnb men
 0000018B  FF 75 F0							push auxC
 0000018E  8F 06							pop [esi]
 00000190  41			men:			inc ecx
 00000191  EB B4						jmp wfD
 00000193			ewfD:
 00000193  E9 FFFFFF1B					jmp wMin
 00000198			emin:	
						ret
 00000198  5F		   *	    pop    edi
 00000199  5E		   *	    pop    esi
 0000019A  59		   *	    pop    ecx
 0000019B  5B		   *	    pop    ebx
 0000019C  58		   *	    pop    eax
 0000019D  C9		   *	    leave  
 0000019E  C2 0014	   *	    ret    00014h
 000001A1				Dijkstra ENDP
					
 000001A1				main PROC
 000001A1  9B DB E3				finit
						
						; Imprimimos el mensaje de bienvenida
 000001A4  BA 00000000 R			mov edx, OFFSET bienvenida
 000001A9  E8 00000000 E			call WriteString
 000001AE  E8 00000000 E			call Crlf
 000001B3  E8 00000000 E			call Crlf

						; Pedimos la cantidad de nodos del grafo
 000001B8  BA 00000080 R			mov edx, OFFSET nodos
 000001BD  E8 00000000 E			call WriteString
 000001C2  E8 00000000 E			call ReadDec
 000001C7  E8 00000000 E			call Crlf
 000001CC  A3 0000017A R			mov n, eax
						
						; Inicializamos las variables dim y siz
 000001D1  A1 0000017A R			mov eax, n
 000001D6  0F AF 05				imul eax, n
	   0000017A R
 000001DD  A3 0000017E R			mov dim, eax
 000001E2  6B C0 04				imul eax, TYPE REAL4
 000001E5  A3 00000182 R			mov siz, eax
						
						; Preparamos el heap para guardar los datos
						invoke GetProcessHeap	; Obtenemos el manejador del heap actual, el cual es guardado en eax
 000001EA  E8 00000000 E   *	    call   GetProcessHeap
 000001EF  83 F8 00				cmp eax, NULL	; Si no se obtuvo correctamente el manejador,
 000001F2  0F 84 00000182			je nAlloc		; detenemos el programa
 000001F8  A3 00000186 R			mov hhm, eax
						
						; Inicializamos la matriz de adyacencia en el heap
						invoke HeapAlloc, hhm, HEAP_ZERO_MEMORY, siz	; Asignamos dinamicamente la memoria para almacenar la matriz de adyacencia (retorna
 000001FD  FF 35 00000182 R *	    push   siz
 00000203  6A 08	   *	    push   +000000008h
 00000205  FF 35 00000186 R *	    push   hhm
 0000020B  E8 00000000 E   *	    call   HeapAlloc
																		; en eax un puntero al bloque de memoria), inicializando todos los valores con 0
 00000210  83 F8 00				cmp eax, NULL	; Si no se asigno correctamente el puntero,
 00000213  0F 84 00000161			je nAlloc		; detenemos el programa
 00000219  A3 0000018A R			mov grafo, eax
						
						; PEDIMOS LAS CONEXIONES DEL GRAFO
						
						; Ciclo externo, para pedir la cantidad de conexiones de cada nodo
 0000021E  BB 00000000				mov ebx, 0
 00000223  3B 1D 0000017A R	wN:			cmp ebx, n
 00000229  0F 8D 00000092				jge ewN
							
 0000022F  BA 000000A9 R				mov edx, OFFSET con1
 00000234  E8 00000000 E				call WriteString
 00000239  8B C3					mov eax, ebx
 0000023B  40						inc eax
 0000023C  E8 00000000 E				call WriteDec
 00000241  BA 000000D5 R				mov edx, OFFSET con2
 00000246  E8 00000000 E				call WriteString
 0000024B  E8 00000000 E				call ReadDec
 00000250  E8 00000000 E				call Crlf
 00000255  A3 0000016E R				mov aux1, eax
							
							; Ciclo interno, para pedir las distancias de las conexiones de cada nodo
 0000025A  B9 00000000					mov ecx, 0
 0000025F  3B 0D 0000016E R	wD:				cmp ecx, aux1
 00000265  7D 54						jge ewD
								
								; Pedimos el nodo con el cual esta conectado el nodo actual
 00000267  BA 000000D8 R					mov edx, OFFSET con3
 0000026C  E8 00000000 E					call WriteString
 00000271  E8 00000000 E					call ReadDec
 00000276  48							dec eax
 00000277  A3 00000172 R					mov aux2, eax
								
								; Pedimos la distancia de la conexion actual
 0000027C  BA 00000104 R					mov edx, OFFSET con4
 00000281  E8 00000000 E					call WriteString
 00000286  E8 00000000 E					call ReadFloat
 0000028B  E8 00000000 E					call Crlf
								
								; Calculamos la coordenada de la conexion en la matriz de adyacencia y la introducimos
								invoke IndexarMatriz, grafo, n, ebx, aux2, TYPE REAL4
 00000290  6A 04	   *	    push   +000000004h
 00000292  FF 35 00000172 R *	    push   aux2
 00000298  53		   *	    push   ebx
 00000299  FF 35 0000017A R *	    push   n
 0000029F  FF 35 0000018A R *	    push   grafo
 000002A5  E8 FFFFFD6B	   *	    call   IndexarMatriz
 000002AA  D9 1D 00000176 R					fstp auxF
 000002B0  FF 35 00000176 R					push auxF
 000002B6  8F 06						pop [esi]
								
 000002B8  41							inc ecx
 000002B9  EB A4						jmp wD
 000002BB			ewD:		
 000002BB  43						inc ebx
 000002BC  E9 FFFFFF62					jmp wN
 000002C1			ewN:	
						; Pedimos el nodo de partida
 000002C1  BA 0000012A R			mov edx, OFFSET ini
 000002C6  E8 00000000 E			call WriteString
 000002CB  E8 00000000 E			call ReadDec
 000002D0  48					dec eax
 000002D1  A3 00000196 R			mov partida, eax

						; Inicializamos en el heap el arreglo para almacenar las distancias de la misma manera que la matriz de adyacencia
 000002D6  8B 1D 0000017A R			mov ebx, n
 000002DC  6B DB 04				imul ebx, TYPE REAL4
						invoke HeapAlloc, hhm, HEAP_ZERO_MEMORY, ebx
 000002DF  53		   *	    push   ebx
 000002E0  6A 08	   *	    push   +000000008h
 000002E2  FF 35 00000186 R *	    push   hhm
 000002E8  E8 00000000 E   *	    call   HeapAlloc
 000002ED  83 F8 00				cmp eax, NULL
 000002F0  0F 84 00000084			je nAlloc
 000002F6  A3 0000018E R			mov distancias, eax

						; Inicializamos en el heap un arreglo para comprobar luego en el algoritmo los nodos que ya han sido visitados
 000002FB  8B 1D 0000017A R			mov ebx, n
 00000301  6B DB 01				imul ebx, TYPE BYTE
						invoke HeapAlloc, hhm, HEAP_ZERO_MEMORY, ebx
 00000304  53		   *	    push   ebx
 00000305  6A 08	   *	    push   +000000008h
 00000307  FF 35 00000186 R *	    push   hhm
 0000030D  E8 00000000 E   *	    call   HeapAlloc
 00000312  83 F8 00				cmp eax, NULL
 00000315  74 63				je nAlloc
 00000317  A3 00000192 R			mov boo, eax
						
						; Llamamos al procedimiento para ejecutar el algoritmo
						invoke Dijkstra, grafo, n, distancias, boo, partida
 0000031C  FF 35 00000196 R *	    push   partida
 00000322  FF 35 00000192 R *	    push   boo
 00000328  FF 35 0000018E R *	    push   distancias
 0000032E  FF 35 0000017A R *	    push   n
 00000334  FF 35 0000018A R *	    push   grafo
 0000033A  E8 FFFFFD06	   *	    call   Dijkstra

						; Si el programa termina con exito, liberamos la memoria ocupada por la matriz y los arreglos
						invoke HeapFree, hhm, 0, grafo
 0000033F  FF 35 0000018A R *	    push   grafo
 00000345  6A 00	   *	    push   +000000000h
 00000347  FF 35 00000186 R *	    push   hhm
 0000034D  E8 00000000 E   *	    call   HeapFree
						invoke HeapFree, hhm, 0, distancias
 00000352  FF 35 0000018E R *	    push   distancias
 00000358  6A 00	   *	    push   +000000000h
 0000035A  FF 35 00000186 R *	    push   hhm
 00000360  E8 00000000 E   *	    call   HeapFree
						invoke HeapFree, hhm, 0, boo
 00000365  FF 35 00000192 R *	    push   boo
 0000036B  6A 00	   *	    push   +000000000h
 0000036D  FF 35 00000186 R *	    push   hhm
 00000373  E8 00000000 E   *	    call   HeapFree
 00000378  EB 0A				jmp en
						
						; En caso de que la asignacion de memoria fallase, le informamos al usuario
 0000037A  BA 00000147 R	nAlloc:	mov edx, OFFSET fail
 0000037F  E8 00000000 E			call WriteString
						
 00000384  E8 00000000 E	en:		call ReadDec
						exit
 00000389  6A 00	   *	    push   +000000000h
 0000038B  E8 00000000 E   *	    call   ExitProcess
 00000390				main ENDP
					END main
Microsoft (R) Macro Assembler Version 14.11.25547.0	    11/10/17 15:21:43
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001A3 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000390 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CompararFlotantes  . . . . . . .	P Near	 00000037 _TEXT	Length= 0000000E Public STDCALL
  fc1  . . . . . . . . . . . . .	DWord	 bp + 00000008
  fc2  . . . . . . . . . . . . .	DWord	 bp + 0000000C
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Dijkstra . . . . . . . . . . . .	P Near	 00000045 _TEXT	Length= 0000015C Public STDCALL
  graph  . . . . . . . . . . . .	DWord	 bp + 00000008
  no . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  dists  . . . . . . . . . . . .	DWord	 bp + 00000010
  conf . . . . . . . . . . . . .	DWord	 bp + 00000014
  start  . . . . . . . . . . . .	DWord	 bp + 00000018
  vis  . . . . . . . . . . . . .	Byte	 bp - 00000001
  x  . . . . . . . . . . . . . .	DWord	 bp - 00000008
  d  . . . . . . . . . . . . . .	DWord	 bp - 0000000C
  auxC . . . . . . . . . . . . .	DWord	 bp - 00000010
  wInit  . . . . . . . . . . . .	L Near	 00000055 _TEXT	
  if0  . . . . . . . . . . . . .	L Near	 00000087 _TEXT	
  e0 . . . . . . . . . . . . . .	L Near	 0000008E _TEXT	
  ewInit . . . . . . . . . . . .	L Near	 00000091 _TEXT	
  wMin . . . . . . . . . . . . .	L Near	 000000B3 _TEXT	
  wVis . . . . . . . . . . . . .	L Near	 000000BC _TEXT	
  brv  . . . . . . . . . . . . .	L Near	 000000DB _TEXT	
  ewVis  . . . . . . . . . . . .	L Near	 000000DE _TEXT	
  exp  . . . . . . . . . . . . .	L Near	 000000F4 _TEXT	
  nd . . . . . . . . . . . . . .	L Near	 0000012E _TEXT	
  eexp . . . . . . . . . . . . .	L Near	 00000131 _TEXT	
  wfD  . . . . . . . . . . . . .	L Near	 00000147 _TEXT	
  men  . . . . . . . . . . . . .	L Near	 00000190 _TEXT	
  ewfD . . . . . . . . . . . . .	L Near	 00000193 _TEXT	
  emin . . . . . . . . . . . . .	L Near	 00000198 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IndexarArreglo . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000015 Public STDCALL
  arreglo  . . . . . . . . . . .	DWord	 bp + 00000008
  index  . . . . . . . . . . . .	DWord	 bp + 0000000C
  tam  . . . . . . . . . . . . .	DWord	 bp + 00000010
IndexarMatriz  . . . . . . . . .	P Near	 00000015 _TEXT	Length= 00000022 Public STDCALL
  matriz . . . . . . . . . . . .	DWord	 bp + 00000008
  na . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  fila . . . . . . . . . . . . .	DWord	 bp + 00000010
  columna  . . . . . . . . . . .	DWord	 bp + 00000014
  tam  . . . . . . . . . . . . .	DWord	 bp + 00000018
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 000001A1 _TEXT	Length= 000001EF Public STDCALL
  wN . . . . . . . . . . . . . .	L Near	 00000223 _TEXT	
  wD . . . . . . . . . . . . . .	L Near	 0000025F _TEXT	
  ewD  . . . . . . . . . . . . .	L Near	 000002BB _TEXT	
  ewN  . . . . . . . . . . . . .	L Near	 000002C1 _TEXT	
  nAlloc . . . . . . . . . . . .	L Near	 0000037A _TEXT	
  en . . . . . . . . . . . . . .	L Near	 00000384 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
aux1 . . . . . . . . . . . . . .	DWord	 0000016E _DATA	
aux2 . . . . . . . . . . . . . .	DWord	 00000172 _DATA	
auxF . . . . . . . . . . . . . .	DWord	 00000176 _DATA	
bienvenida . . . . . . . . . . .	Byte	 00000000 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
boo  . . . . . . . . . . . . . .	DWord	 00000192 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
con1 . . . . . . . . . . . . . .	Byte	 000000A9 _DATA	
con2 . . . . . . . . . . . . . .	Byte	 000000D5 _DATA	
con3 . . . . . . . . . . . . . .	Byte	 000000D8 _DATA	
con4 . . . . . . . . . . . . . .	Byte	 00000104 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dim  . . . . . . . . . . . . . .	DWord	 0000017E _DATA	
distancias . . . . . . . . . . .	DWord	 0000018E _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fail . . . . . . . . . . . . . .	Byte	 00000147 _DATA	
grafo  . . . . . . . . . . . . .	DWord	 0000018A _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hhm  . . . . . . . . . . . . . .	DWord	 00000186 _DATA	
ini  . . . . . . . . . . . . . .	Byte	 0000012A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
nodos  . . . . . . . . . . . . .	Byte	 00000080 _DATA	
n  . . . . . . . . . . . . . . .	DWord	 0000017A _DATA	
partida  . . . . . . . . . . . .	DWord	 00000196 _DATA	
p  . . . . . . . . . . . . . . .	Byte	 000001A0 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
res  . . . . . . . . . . . . . .	Byte	 0000019A _DATA	
siz  . . . . . . . . . . . . . .	DWord	 00000182 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
