Microsoft (R) Macro Assembler Version 14.11.25547.0	    11/12/17 14:56:19
main.asm						     Page 1 - 1


				; PROYECTO DE LENGUAJE ENSAMBLADOR
				; ARQUITECTURA DE COMPUTADORES, SEMESTRE 2017-II
				; Integrantes: Kewin Evers Yagari, Daniel Sanchez Buitrago, Daniel Velez Santamaria
				; Docente: Hugo de Jesus Mesa Yepes

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.DATA
					; Valores para comparar con 0
 00000000 2B8CBCCC			epsilon REAL4 1.0E-12
					
					; Mensaje de bienvenida para el programa
 00000004 42 49 45 4E 56		bienvenida BYTE "BIENVENIDO USUARIO", 0dh, 0ah,
	   45 4E 49 44 4F
	   20 55 53 55 41
	   52 49 4F 0D 0A
	   45 73 74 65 20
	   70 72 6F 67 72
	   61 6D 61 20 63
	   61 6C 63 75 6C
	   61 20 65 6C 20
	   63 61 6D 69 6E
	   6F 20 6D 61 73
	   20 63 6F 72 74
	   6F 20 65 6E 20
	   75 6E 20 67 72
	   61 66 6F 20 64
	   65 73 64 65 20
	   65 6C 20 6E 6F
	   64 6F 20 64 65
	   20 70 61 72 74
	   69 64 61 20 68
	   61 73 74 61 20
	   74 6F 64 6F 73
	   20 6C 6F 73 20
	   64 65 6D 61 73
	   20 6E 6F 64 6F
	   73 2E 00
									"Este programa calcula el camino mas corto en un grafo desde el nodo de partida hasta todos los demas nodos.", 0

					; Mensaje para pedir la cantidad de nodos
 00000084 49 6E 67 72 65		nodos BYTE "Ingrese la cantidad de nodos del grafo: ", 0
	   73 65 20 6C 61
	   20 63 61 6E 74
	   69 64 61 64 20
	   64 65 20 6E 6F
	   64 6F 73 20 64
	   65 6C 20 67 72
	   61 66 6F 3A 20
	   00

					; Mensajes para pedir las conexiones en el grafo
 000000AD 49 6E 67 72 65		con1 BYTE "Ingrese la cantidad de conexiones del nodo ", 0
	   73 65 20 6C 61
	   20 63 61 6E 74
	   69 64 61 64 20
	   64 65 20 63 6F
	   6E 65 78 69 6F
	   6E 65 73 20 64
	   65 6C 20 6E 6F
	   64 6F 20 00
 000000D9 3A 20 00			con2 BYTE ": ", 0
 000000DC 49 6E 67 72 65		con3 BYTE "Ingrese el nodo con el que esta conectado: ", 0
	   73 65 20 65 6C
	   20 6E 6F 64 6F
	   20 63 6F 6E 20
	   65 6C 20 71 75
	   65 20 65 73 74
	   61 20 63 6F 6E
	   65 63 74 61 64
	   6F 3A 20 00
 00000108 49 6E 67 72 65		con4 BYTE "Ingrese la distancia de la conexion: ", 0
	   73 65 20 6C 61
	   20 64 69 73 74
	   61 6E 63 69 61
	   20 64 65 20 6C
	   61 20 63 6F 6E
	   65 78 69 6F 6E
	   3A 20 00

					; Mensaje para pedir el nodo inicial
 0000012E 49 6E 67 72 65		ini BYTE "Ingrese el nodo de partida: ", 0
	   73 65 20 65 6C
	   20 6E 6F 64 6F
	   20 64 65 20 70
	   61 72 74 69 64
	   61 3A 20 00

					; Mensaje para informar que la asignacion de memoria fallo
 0000014B 45 72 72 6F 72		fail BYTE "Error: La asignacion de memoria fallo.", 0
	   3A 20 4C 61 20
	   61 73 69 67 6E
	   61 63 69 6F 6E
	   20 64 65 20 6D
	   65 6D 6F 72 69
	   61 20 66 61 6C
	   6C 6F 2E 00

					; Mensajes para imprimir la tabla de distancias
 00000172 44 49 53 54 41		resul BYTE "DISTANCIAS MINIMAS", 0
	   4E 43 49 41 53
	   20 4D 49 4E 49
	   4D 41 53 00
 00000185 4E 6F 64 6F 20		node BYTE "Nodo ", 0
	   00
 0000018B 69 6E 66 00			infin BYTE "inf", 0

					; Variables auxiliares para guardar datos temporalmente
 0000018F 00000000			aux1 DWORD ?
 00000193 00000000			aux2 DWORD ?
 00000197 00000000			auxF REAL4 ?

					; Cantidad de nodos del grafo
 0000019B 00000000			n DWORD ?
					
					; Cantidad total de elementos de la matriz de adyacencia
 0000019F 00000000			dim DWORD ?
					
					; Numero total de bytes que ocupa la matriz de adyacencia
 000001A3 00000000			siz DWORD ?
					
					; Manejador del Heap
 000001A7 00000000			hhm DWORD ?
					
					; Puntero a la matriz de adyacencia
 000001AB 00000000			grafo DWORD ?

					; Arreglo de las distancias
 000001AF 00000000			distancias DWORD ?
					
					; Arreglo para nodos visitados
 000001B3 00000000			boo DWORD ?

					; Nodo de partida
 000001B7 00000000			partida DWORD ?

					; Mensaje para la entrega de resultados
 000001BB 4E 6F 64 6F 20		res BYTE "Nodo ", 0
	   00
 000001C1 3A 09 00			p BYTE ":", 9h, 0

					; Variable para verificar si todos los nodos fueron explorados
 000001C4 00				vis BYTE ?

					; Variables para obtener el nodo con la distancia mas pequena
 000001C5 00000000			d REAL4 ?
 000001C9 00000000			x DWORD ?

 00000000			.CODE
					;------------------------------------------------------------------------------------------
 00000000				IndexarArreglo PROC USES edx,
						arreglo: DWORD,		; Apuntador al arreglo
						index: DWORD,		; Indice del elemento
						tam: DWORD			; Tamano del tipo de dato almacenado en el arreglo
					; Calcula la direccion de memoria donde se ubica un elemento en un arreglo dado su indice
					; Devuelve: esi = direccion de memoria del elemento indexado
					;------------------------------------------------------------------------------------------
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
 00000003  52		   *	    push   edx
 00000004  8B 75 08				mov esi, arreglo
						
 00000007  8B 55 0C				mov edx, index
 0000000A  0F AF 55 10				imul edx, tam
 0000000E  03 F2				add esi, edx
						
						ret
 00000010  5A		   *	    pop    edx
 00000011  C9		   *	    leave  
 00000012  C2 000C	   *	    ret    0000Ch
 00000015				IndexarArreglo ENDP

					;-------------------------------------------------------------------------------------------------------------------------
 00000015				IndexarMatriz PROC USES edx,
						matriz: DWORD,		; Apuntador a la matriz
						na: DWORD,			; Dimension de la matriz
						fila: DWORD,		; Fila del elemento
						columna: DWORD,		; Columna del elemento
						tam: DWORD			; Tamano del tipo de dato almacenado en la matriz
					; Calcula la direccion de memoria donde se ubica un elemento en una matriz dadas la fila y la columna donde esta ubicado
					; Devuelve: esi = direccion de memoria del elemento indexado
					;-------------------------------------------------------------------------------------------------------------------------
 00000015  55		   *	    push   ebp
 00000016  8B EC	   *	    mov    ebp, esp
 00000018  52		   *	    push   edx
 00000019  8B 75 08				mov esi, matriz
						
 0000001C  8B 55 14				mov edx, columna
 0000001F  0F AF 55 18				imul edx, tam
 00000023  03 F2				add esi, edx
						
 00000025  8B 55 10				mov edx, fila
 00000028  0F AF 55 0C				imul edx, na
 0000002C  0F AF 55 18				imul edx, tam
 00000030  03 F2				add esi, edx
						
						ret
 00000032  5A		   *	    pop    edx
 00000033  C9		   *	    leave  
 00000034  C2 0014	   *	    ret    00014h
 00000037				IndexarMatriz ENDP
					
 00000037				main PROC
 00000037  9B DB E3				finit
						
						; Imprimimos el mensaje de bienvenida
 0000003A  BA 00000004 R			mov edx, OFFSET bienvenida
 0000003F  E8 00000000 E			call WriteString
 00000044  E8 00000000 E			call Crlf
 00000049  E8 00000000 E			call Crlf

						; Pedimos la cantidad de nodos del grafo
 0000004E  BA 00000084 R			mov edx, OFFSET nodos
 00000053  E8 00000000 E			call WriteString
 00000058  E8 00000000 E			call ReadDec
 0000005D  E8 00000000 E			call Crlf
 00000062  A3 0000019B R			mov n, eax
						
						; Inicializamos las variables dim y siz
 00000067  A1 0000019B R			mov eax, n
 0000006C  0F AF 05				imul eax, n
	   0000019B R
 00000073  A3 0000019F R			mov dim, eax
 00000078  6B C0 04				imul eax, TYPE REAL4
 0000007B  A3 000001A3 R			mov siz, eax
						
						; Preparamos el heap para guardar los datos
						invoke GetProcessHeap	; Obtenemos el manejador del heap actual, el cual es guardado en eax
 00000080  E8 00000000 E   *	    call   GetProcessHeap
 00000085  83 F8 00				cmp eax, NULL	; Si no se obtuvo correctamente el manejador,
 00000088  0F 84 00000394			je nAlloc		; detenemos el programa
 0000008E  A3 000001A7 R			mov hhm, eax
						
						; Inicializamos la matriz de adyacencia en el heap
						invoke HeapAlloc, hhm, HEAP_ZERO_MEMORY, siz	; Asignamos dinamicamente la memoria para almacenar la matriz de adyacencia (retorna
 00000093  FF 35 000001A3 R *	    push   siz
 00000099  6A 08	   *	    push   +000000008h
 0000009B  FF 35 000001A7 R *	    push   hhm
 000000A1  E8 00000000 E   *	    call   HeapAlloc
																		; en eax un puntero al bloque de memoria), inicializando todos los valores con 0
 000000A6  83 F8 00				cmp eax, NULL	; Si no se asigno correctamente el puntero,
 000000A9  0F 84 00000373			je nAlloc		; detenemos el programa
 000000AF  A3 000001AB R			mov grafo, eax
						
						; PEDIMOS LAS CONEXIONES DEL GRAFO
						
						; Ciclo externo, para pedir la cantidad de conexiones de cada nodo
 000000B4  BB 00000000				mov ebx, 0
 000000B9  3B 1D 0000019B R	wN:			cmp ebx, n
 000000BF  0F 8D 00000086				jge ewN
							
 000000C5  BA 000000AD R				mov edx, OFFSET con1
 000000CA  E8 00000000 E				call WriteString
 000000CF  8B C3					mov eax, ebx
 000000D1  40						inc eax
 000000D2  E8 00000000 E				call WriteDec
 000000D7  BA 000000D9 R				mov edx, OFFSET con2
 000000DC  E8 00000000 E				call WriteString
 000000E1  E8 00000000 E				call ReadDec
 000000E6  E8 00000000 E				call Crlf
 000000EB  A3 0000018F R				mov aux1, eax
							
							; Ciclo interno, para pedir las distancias de las conexiones de cada nodo
 000000F0  B9 00000000					mov ecx, 0
 000000F5  3B 0D 0000018F R	wD:				cmp ecx, aux1
 000000FB  7D 48						jge ewD
								
								; Pedimos el nodo con el cual esta conectado el nodo actual
 000000FD  BA 000000DC R					mov edx, OFFSET con3
 00000102  E8 00000000 E					call WriteString
 00000107  E8 00000000 E					call ReadDec
 0000010C  48							dec eax
 0000010D  A3 00000193 R					mov aux2, eax
								
								; Pedimos la distancia de la conexion actual
 00000112  BA 00000108 R					mov edx, OFFSET con4
 00000117  E8 00000000 E					call WriteString
 0000011C  E8 00000000 E					call ReadFloat
 00000121  E8 00000000 E					call Crlf
								
								; Calculamos la coordenada de la conexion en la matriz de adyacencia y la introducimos
								invoke IndexarMatriz, grafo, n, ebx, aux2, TYPE REAL4
 00000126  6A 04	   *	    push   +000000004h
 00000128  FF 35 00000193 R *	    push   aux2
 0000012E  53		   *	    push   ebx
 0000012F  FF 35 0000019B R *	    push   n
 00000135  FF 35 000001AB R *	    push   grafo
 0000013B  E8 FFFFFED5	   *	    call   IndexarMatriz
 00000140  D9 1E						fstp REAL4 PTR [esi]
								
 00000142  41							inc ecx
 00000143  EB B0						jmp wD
 00000145			ewD:		
 00000145  43						inc ebx
 00000146  E9 FFFFFF6E					jmp wN
 0000014B			ewN:	
						; Pedimos el nodo de partida
 0000014B  BA 0000012E R			mov edx, OFFSET ini
 00000150  E8 00000000 E			call WriteString
 00000155  E8 00000000 E			call ReadDec
 0000015A  48					dec eax
 0000015B  A3 000001B7 R			mov partida, eax

						; Inicializamos en el heap el arreglo para almacenar las distancias de la misma manera que la matriz de adyacencia
 00000160  8B 1D 0000019B R			mov ebx, n
 00000166  6B DB 04				imul ebx, TYPE REAL4
						invoke HeapAlloc, hhm, HEAP_ZERO_MEMORY, ebx
 00000169  53		   *	    push   ebx
 0000016A  6A 08	   *	    push   +000000008h
 0000016C  FF 35 000001A7 R *	    push   hhm
 00000172  E8 00000000 E   *	    call   HeapAlloc
 00000177  83 F8 00				cmp eax, NULL
 0000017A  0F 84 000002A2			je nAlloc
 00000180  A3 000001AF R			mov distancias, eax

						; Inicializamos en el heap un arreglo para comprobar en el algoritmo los nodos que ya han sido visitados
 00000185  8B 1D 0000019B R			mov ebx, n
 0000018B  6B DB 01				imul ebx, TYPE BYTE
						invoke HeapAlloc, hhm, HEAP_ZERO_MEMORY, ebx
 0000018E  53		   *	    push   ebx
 0000018F  6A 08	   *	    push   +000000008h
 00000191  FF 35 000001A7 R *	    push   hhm
 00000197  E8 00000000 E   *	    call   HeapAlloc
 0000019C  83 F8 00				cmp eax, NULL
 0000019F  0F 84 0000027D			je nAlloc
 000001A5  A3 000001B3 R			mov boo, eax
						
						; Para cada nodo del grafo, inicializamos las distancias iniciales
 000001AA  B9 00000000				mov ecx, 0
 000001AF  3B 0D 0000019B R	wInit:	cmp ecx, n
 000001B5  7D 47				jge ewInit
							invoke IndexarArreglo, distancias, ecx, TYPE REAL4
 000001B7  6A 04	   *	    push   +000000004h
 000001B9  51		   *	    push   ecx
 000001BA  FF 35 000001AF R *	    push   distancias
 000001C0  E8 FFFFFE3B	   *	    call   IndexarArreglo
 000001C5  8B FE					mov edi, esi
							invoke IndexarMatriz, grafo, n, partida, ecx, TYPE REAL4
 000001C7  6A 04	   *	    push   +000000004h
 000001C9  51		   *	    push   ecx
 000001CA  FF 35 000001B7 R *	    push   partida
 000001D0  FF 35 0000019B R *	    push   n
 000001D6  FF 35 000001AB R *	    push   grafo
 000001DC  E8 FFFFFE34	   *	    call   IndexarMatriz

 000001E1  D9 06					fld REAL4 PTR [esi]
 000001E3  D8 1D 00000000 R				fcomp epsilon
 000001E9  DF E0					fnstsw ax
 000001EB  9E						sahf
 000001EC  76 06					jna if0
 000001EE  D9 06						fld REAL4 PTR [esi]		; Si existe conexion entre el nodo inicial y el nodo actual,
 000001F0  D9 1F						fstp REAL4 PTR [edi]	; hacemos la distancia inicial del nodo actual igual a la distancia de dicha conexion
 000001F2  EB 07						jmp el0
 000001F4  68 7F800000		if0:			push 7F800000h			; Si no existe conexion entre los nodos,
 000001F9  8F 07						pop REAL4 PTR [edi]		; la distancia inicial es igual a infinito
 000001FB			el0:		
 000001FB  41						inc ecx
 000001FC  EB B1					jmp wInit
 000001FE			ewInit:	
						; Inicializamos la distancia minima del nodo inicial en 0
						invoke IndexarArreglo, distancias, partida, TYPE REAL4
 000001FE  6A 04	   *	    push   +000000004h
 00000200  FF 35 000001B7 R *	    push   partida
 00000206  FF 35 000001AF R *	    push   distancias
 0000020C  E8 FFFFFDEF	   *	    call   IndexarArreglo
 00000211  C7 05 0000018F R			mov aux1, 0
	   00000000
 0000021B  DB 05 0000018F R			fild aux1
 00000221  D9 1E				fstp REAL4 PTR [esi]

						; Marcamos como visitado el nodo inicial
						invoke IndexarArreglo, boo, partida, TYPE BYTE
 00000223  6A 01	   *	    push   +000000001h
 00000225  FF 35 000001B7 R *	    push   partida
 0000022B  FF 35 000001B3 R *	    push   boo
 00000231  E8 FFFFFDCA	   *	    call   IndexarArreglo
 00000236  6A 01				push 1
 00000238  8F 06				pop [esi]

 0000023A  C6 05 000001C4 R	wMin:	mov vis, 1
	   01

						; Iteramos para verificar si todos los nodos estan explorados
 00000241  BB 00000000				mov ebx, 0
 00000246  3B 1D 0000019B R	wVis:	cmp ebx, n
 0000024C  7D 20				jge ewVis
							invoke IndexarArreglo, boo, ebx, TYPE BYTE
 0000024E  6A 01	   *	    push   +000000001h
 00000250  53		   *	    push   ebx
 00000251  FF 35 000001B3 R *	    push   boo
 00000257  E8 FFFFFDA4	   *	    call   IndexarArreglo
 0000025C  8A 06					mov al, BYTE PTR [esi]
 0000025E  3C 00					cmp al, 0
 00000260  75 09					jnz brv
 00000262  C6 05 000001C4 R					mov vis, 0
	   00
 00000269  EB 03						jmp ewVis

 0000026B  43			brv:			inc ebx
 0000026C  EB D8						jmp wVis
 0000026E			ewVis:
						; Si aun no se han explorado todos los nodos, calculamos las distancias minimas para esta iteracion
 0000026E  80 3D 000001C4 R			cmp vis, 0
	   00
 00000275  0F 85 000000DA			jnz emin
 0000027B  C7 05 000001C5 R				mov d, 7F800000h
	   7F800000

							; Seleccionamos el nodo no-explorado con la distancia minima (lo denominamos nodo minimo)
 00000285  B9 00000000					mov ecx, 0
 0000028A  3B 0D 0000019B R	exp:		cmp ecx, n
 00000290  7D 42					jge eexp
								invoke IndexarArreglo, distancias, ecx, TYPE REAL4
 00000292  6A 04	   *	    push   +000000004h
 00000294  51		   *	    push   ecx
 00000295  FF 35 000001AF R *	    push   distancias
 0000029B  E8 FFFFFD60	   *	    call   IndexarArreglo
 000002A0  8B FE						mov edi, esi
								invoke IndexarArreglo, boo, ecx, TYPE BYTE
 000002A2  6A 01	   *	    push   +000000001h
 000002A4  51		   *	    push   ecx
 000002A5  FF 35 000001B3 R *	    push   boo
 000002AB  E8 FFFFFD50	   *	    call   IndexarArreglo
 000002B0  8A 06						mov al, BYTE PTR [esi]
 000002B2  3C 00						cmp al, 0
 000002B4  75 1B						jnz nd
 000002B6  D9 07							fld REAL4 PTR [edi]
 000002B8  D8 1D 000001C5 R						fcomp d
 000002BE  DF E0							fnstsw ax
 000002C0  9E								sahf
 000002C1  73 0E							jnb nd
 000002C3  D9 07								fld REAL4 PTR [edi]
 000002C5  D9 1D 000001C5 R							fstp d
 000002CB  89 0D 000001C9 R							mov x, ecx

 000002D1  41			nd:					inc ecx
 000002D2  EB B6							jmp exp
 000002D4			eexp:
							; Marcamos el nodo obtenido como explorado
							invoke IndexarArreglo, boo, x, TYPE BYTE
 000002D4  6A 01	   *	    push   +000000001h
 000002D6  FF 35 000001C9 R *	    push   x
 000002DC  FF 35 000001B3 R *	    push   boo
 000002E2  E8 FFFFFD19	   *	    call   IndexarArreglo
 000002E7  6A 01					push 1
 000002E9  8F 06					pop [esi]
							
							; Iteramos a traves de las conexiones del nodo
 000002EB  B9 00000000					mov ecx, 0
 000002F0  3B 0D 0000019B R	wfD:		cmp ecx, n
 000002F6  7D 58					jge ewfD
								invoke IndexarMatriz, grafo, n, x, ecx, TYPE REAL4
 000002F8  6A 04	   *	    push   +000000004h
 000002FA  51		   *	    push   ecx
 000002FB  FF 35 000001C9 R *	    push   x
 00000301  FF 35 0000019B R *	    push   n
 00000307  FF 35 000001AB R *	    push   grafo
 0000030D  E8 FFFFFD03	   *	    call   IndexarMatriz
 00000312  D9 06						fld REAL4 PTR [esi]
 00000314  D8 1D 00000000 R					fcomp epsilon
 0000031A  DF E0						fnstsw ax
 0000031C  9E							sahf
 0000031D  76 2E						jna is0
 0000031F  D9 06							fld REAL4 PTR [esi]
									invoke IndexarArreglo, distancias, x, TYPE REAL4
 00000321  6A 04	   *	    push   +000000004h
 00000323  FF 35 000001C9 R *	    push   x
 00000329  FF 35 000001AF R *	    push   distancias
 0000032F  E8 FFFFFCCC	   *	    call   IndexarArreglo
 00000334  D8 06							fadd REAL4 PTR [esi]
									invoke IndexarArreglo, distancias, ecx, TYPE REAL4
 00000336  6A 04	   *	    push   +000000004h
 00000338  51		   *	    push   ecx
 00000339  FF 35 000001AF R *	    push   distancias
 0000033F  E8 FFFFFCBC	   *	    call   IndexarArreglo
 00000344  D8 16							fcom REAL4 PTR [esi]
 00000346  DF E0							fnstsw ax
 00000348  9E								sahf
 00000349  73 02							jnb is0
 0000034B  D9 1E								fstp REAL4 PTR [esi]	; Si la distancia del nodo minimo sumada con la distancia de su conexion con el nodo actual
																; es menor que la distancia del nodo actual, hacemos el ultimo valor igual al primero
 0000034D			is0:				
 0000034D  41							inc ecx
 0000034E  EB A0						jmp wfD
 00000350			ewfD:
 00000350  E9 FFFFFEE5					jmp wMin
 00000355			emin:
						; Iteramos a traves del arreglo de distancias e imprimimos cada una
 00000355  E8 00000000 E			call Crlf
 0000035A  BA 00000172 R			mov edx, OFFSET resul
 0000035F  E8 00000000 E			call WriteString
 00000364  E8 00000000 E			call Crlf

 00000369  B9 00000000				mov ecx, 0
 0000036E  3B 0D 0000019B R	wpr:	cmp ecx, n
 00000374  7D 6C				jge ewpr
 00000376  BA 00000185 R				mov edx, OFFSET node
 0000037B  E8 00000000 E				call WriteString
 00000380  8B C1					mov eax, ecx
 00000382  40						inc eax
 00000383  E8 00000000 E				call WriteDec
 00000388  B0 3A					mov al, ':'
 0000038A  E8 00000000 E				call WriteChar
 0000038F  B0 09					mov al, 9h
 00000391  E8 00000000 E				call WriteChar
 00000396  E8 00000000 E				call WriteChar

							invoke IndexarArreglo, distancias, ecx, TYPE REAL4
 0000039B  6A 04	   *	    push   +000000004h
 0000039D  51		   *	    push   ecx
 0000039E  FF 35 000001AF R *	    push   distancias
 000003A4  E8 FFFFFC57	   *	    call   IndexarArreglo
 000003A9  D9 06					fld REAL4 PTR[esi]
 000003AB  D8 15 00000000 R				fcom epsilon
 000003B1  DF E0					fnstsw ax
 000003B3  9E						sahf
 000003B4  73 19					jnb inf
 000003B6  3B 0D 000001B7 R					cmp ecx, partida
 000003BC  74 11						je inf
 000003BE  BA 0000018B R						mov edx, OFFSET infin
 000003C3  E8 00000000 E						call WriteString
 000003C8  E8 00000000 E						call Crlf
 000003CD  EB 10							jmp ninf
 000003CF  E8 00000000 E	inf:			call WriteFloat
 000003D4  D9 1D 00000197 R					fstp auxF
 000003DA  E8 00000000 E					call Crlf
 000003DF			ninf:
 000003DF  41						inc ecx
 000003E0  EB 8C					jmp wpr
 000003E2			ewpr:
 000003E2  E8 00000000 E			call Crlf

						; Si el programa termina con exito, liberamos la memoria ocupada por la matriz y los arreglos
						invoke HeapFree, hhm, 0, grafo
 000003E7  FF 35 000001AB R *	    push   grafo
 000003ED  6A 00	   *	    push   +000000000h
 000003EF  FF 35 000001A7 R *	    push   hhm
 000003F5  E8 00000000 E   *	    call   HeapFree
						invoke HeapFree, hhm, 0, distancias
 000003FA  FF 35 000001AF R *	    push   distancias
 00000400  6A 00	   *	    push   +000000000h
 00000402  FF 35 000001A7 R *	    push   hhm
 00000408  E8 00000000 E   *	    call   HeapFree
						invoke HeapFree, hhm, 0, boo
 0000040D  FF 35 000001B3 R *	    push   boo
 00000413  6A 00	   *	    push   +000000000h
 00000415  FF 35 000001A7 R *	    push   hhm
 0000041B  E8 00000000 E   *	    call   HeapFree
 00000420  EB 0A				jmp en
						
						; En caso de que la asignacion de memoria fallase, le informamos al usuario
 00000422  BA 0000014B R	nAlloc:	mov edx, OFFSET fail
 00000427  E8 00000000 E			call WriteString
						
 0000042C			en:		
						exit
 0000042C  6A 00	   *	    push   +000000000h
 0000042E  E8 00000000 E   *	    call   ExitProcess
 00000433				main ENDP
					END main
Microsoft (R) Macro Assembler Version 14.11.25547.0	    11/12/17 14:56:19
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001CD Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000433 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IndexarArreglo . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000015 Public STDCALL
  arreglo  . . . . . . . . . . .	DWord	 bp + 00000008
  index  . . . . . . . . . . . .	DWord	 bp + 0000000C
  tam  . . . . . . . . . . . . .	DWord	 bp + 00000010
IndexarMatriz  . . . . . . . . .	P Near	 00000015 _TEXT	Length= 00000022 Public STDCALL
  matriz . . . . . . . . . . . .	DWord	 bp + 00000008
  na . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  fila . . . . . . . . . . . . .	DWord	 bp + 00000010
  columna  . . . . . . . . . . .	DWord	 bp + 00000014
  tam  . . . . . . . . . . . . .	DWord	 bp + 00000018
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000037 _TEXT	Length= 000003FC Public STDCALL
  wN . . . . . . . . . . . . . .	L Near	 000000B9 _TEXT	
  wD . . . . . . . . . . . . . .	L Near	 000000F5 _TEXT	
  ewD  . . . . . . . . . . . . .	L Near	 00000145 _TEXT	
  ewN  . . . . . . . . . . . . .	L Near	 0000014B _TEXT	
  wInit  . . . . . . . . . . . .	L Near	 000001AF _TEXT	
  if0  . . . . . . . . . . . . .	L Near	 000001F4 _TEXT	
  el0  . . . . . . . . . . . . .	L Near	 000001FB _TEXT	
  ewInit . . . . . . . . . . . .	L Near	 000001FE _TEXT	
  wMin . . . . . . . . . . . . .	L Near	 0000023A _TEXT	
  wVis . . . . . . . . . . . . .	L Near	 00000246 _TEXT	
  brv  . . . . . . . . . . . . .	L Near	 0000026B _TEXT	
  ewVis  . . . . . . . . . . . .	L Near	 0000026E _TEXT	
  exp  . . . . . . . . . . . . .	L Near	 0000028A _TEXT	
  nd . . . . . . . . . . . . . .	L Near	 000002D1 _TEXT	
  eexp . . . . . . . . . . . . .	L Near	 000002D4 _TEXT	
  wfD  . . . . . . . . . . . . .	L Near	 000002F0 _TEXT	
  is0  . . . . . . . . . . . . .	L Near	 0000034D _TEXT	
  ewfD . . . . . . . . . . . . .	L Near	 00000350 _TEXT	
  emin . . . . . . . . . . . . .	L Near	 00000355 _TEXT	
  wpr  . . . . . . . . . . . . .	L Near	 0000036E _TEXT	
  inf  . . . . . . . . . . . . .	L Near	 000003CF _TEXT	
  ninf . . . . . . . . . . . . .	L Near	 000003DF _TEXT	
  ewpr . . . . . . . . . . . . .	L Near	 000003E2 _TEXT	
  nAlloc . . . . . . . . . . . .	L Near	 00000422 _TEXT	
  en . . . . . . . . . . . . . .	L Near	 0000042C _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
aux1 . . . . . . . . . . . . . .	DWord	 0000018F _DATA	
aux2 . . . . . . . . . . . . . .	DWord	 00000193 _DATA	
auxF . . . . . . . . . . . . . .	DWord	 00000197 _DATA	
bienvenida . . . . . . . . . . .	Byte	 00000004 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
boo  . . . . . . . . . . . . . .	DWord	 000001B3 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
con1 . . . . . . . . . . . . . .	Byte	 000000AD _DATA	
con2 . . . . . . . . . . . . . .	Byte	 000000D9 _DATA	
con3 . . . . . . . . . . . . . .	Byte	 000000DC _DATA	
con4 . . . . . . . . . . . . . .	Byte	 00000108 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dim  . . . . . . . . . . . . . .	DWord	 0000019F _DATA	
distancias . . . . . . . . . . .	DWord	 000001AF _DATA	
d  . . . . . . . . . . . . . . .	DWord	 000001C5 _DATA	
epsilon  . . . . . . . . . . . .	DWord	 00000000 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fail . . . . . . . . . . . . . .	Byte	 0000014B _DATA	
grafo  . . . . . . . . . . . . .	DWord	 000001AB _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hhm  . . . . . . . . . . . . . .	DWord	 000001A7 _DATA	
infin  . . . . . . . . . . . . .	Byte	 0000018B _DATA	
ini  . . . . . . . . . . . . . .	Byte	 0000012E _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
node . . . . . . . . . . . . . .	Byte	 00000185 _DATA	
nodos  . . . . . . . . . . . . .	Byte	 00000084 _DATA	
n  . . . . . . . . . . . . . . .	DWord	 0000019B _DATA	
partida  . . . . . . . . . . . .	DWord	 000001B7 _DATA	
p  . . . . . . . . . . . . . . .	Byte	 000001C1 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
resul  . . . . . . . . . . . . .	Byte	 00000172 _DATA	
res  . . . . . . . . . . . . . .	Byte	 000001BB _DATA	
siz  . . . . . . . . . . . . . .	DWord	 000001A3 _DATA	
vis  . . . . . . . . . . . . . .	Byte	 000001C4 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
x  . . . . . . . . . . . . . . .	DWord	 000001C9 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
