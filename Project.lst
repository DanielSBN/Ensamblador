Microsoft (R) Macro Assembler Version 14.11.25547.0	    11/06/17 13:22:58
main.asm						     Page 1 - 1


				; PROYECTO DE LENGUAJE ENSAMBLADOR
				; ARQUITECTURA DE COMPUTADORES, SEMESTRE 2017-II
				; Integrantes: Kewin Evers Yagari, Daniel Sanchez Buitrago, Daniel Velez Santamaria
				; Docente: Hugo de Jesus Mesa Yepes

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.DATA
					; Mensaje de bienvenida para el programa
 00000000 42 49 45 4E 56		bienvenida BYTE "BIENVENIDO USUARIO", 0dh, 0ah,
	   45 4E 49 44 4F
	   20 55 53 55 41
	   52 49 4F 0D 0A
	   45 73 74 65 20
	   70 72 6F 67 72
	   61 6D 61 20 63
	   61 6C 63 75 6C
	   61 20 65 6C 20
	   63 61 6D 69 6E
	   6F 20 6D 61 73
	   20 63 6F 72 74
	   6F 20 65 6E 20
	   75 6E 20 67 72
	   61 66 6F 20 64
	   65 73 64 65 20
	   65 6C 20 6E 6F
	   64 6F 20 64 65
	   20 70 61 72 74
	   69 64 61 20 68
	   61 73 74 61 20
	   74 6F 64 6F 73
	   20 6C 6F 73 20
	   64 65 6D 61 73
	   20 6E 6F 64 6F
	   73 2E 00
									"Este programa calcula el camino mas corto en un grafo desde el nodo de partida hasta todos los demas nodos.", 0

					; Mensaje para pedir la cantidad de nodos
 00000080 49 6E 67 72 65		nodos BYTE "Ingrese la cantidad de nodos del grafo: ", 0
	   73 65 20 6C 61
	   20 63 61 6E 74
	   69 64 61 64 20
	   64 65 20 6E 6F
	   64 6F 73 20 64
	   65 6C 20 67 72
	   61 66 6F 3A 20
	   00

					; Mensajes para pedir las conexiones en el grafo
 000000A9 49 6E 67 72 65		con1 BYTE "Ingrese la cantidad de conexiones del nodo ", 0
	   73 65 20 6C 61
	   20 63 61 6E 74
	   69 64 61 64 20
	   64 65 20 63 6F
	   6E 65 78 69 6F
	   6E 65 73 20 64
	   65 6C 20 6E 6F
	   64 6F 20 00
 000000D5 3A 20 00			con2 BYTE ": ", 0
 000000D8 49 6E 67 72 65		con3 BYTE "Ingrese el nodo con el que esta conectado: ", 0
	   73 65 20 65 6C
	   20 6E 6F 64 6F
	   20 63 6F 6E 20
	   65 6C 20 71 75
	   65 20 65 73 74
	   61 20 63 6F 6E
	   65 63 74 61 64
	   6F 3A 20 00
 00000104 49 6E 67 72 65		con4 BYTE "Ingrese la distancia de la conexion: ", 0
	   73 65 20 6C 61
	   20 64 69 73 74
	   61 6E 63 69 61
	   20 64 65 20 6C
	   61 20 63 6F 6E
	   65 78 69 6F 6E
	   3A 20 00

					; Mensaje para pedir el nodo inicial
 0000012A 49 6E 67 72 65		ini BYTE "Ingrese el nodo de partida: ", 0
	   73 65 20 65 6C
	   20 6E 6F 64 6F
	   20 64 65 20 70
	   61 72 74 69 64
	   61 3A 20 00

					; Mensaje para informar que la asignacion de memoria fallo
 00000147 45 72 72 6F 72		fail BYTE "Error: La asignacion de memoria fallo.", 0
	   3A 20 4C 61 20
	   61 73 69 67 6E
	   61 63 69 6F 6E
	   20 64 65 20 6D
	   65 6D 6F 72 69
	   61 20 66 61 6C
	   6C 6F 2E 00

					; Variables auxiliares para guardar datos temporalmente
 0000016E 00000000			aux1 DWORD ?
 00000172 00000000			aux2 DWORD ?
 00000176 00000000			auxF REAL4 ?

					; Cantidad de nodos del grafo
 0000017A 00000000			n DWORD ?
					
					; Cantidad total de elementos de la matriz de adyacencia
 0000017E 00000000			dim DWORD ?
					
					; Numero total de bytes que ocupa la matriz de adyacencia
 00000182 00000000			siz DWORD ?
					
					; Manejador del Heap
 00000186 00000000			hhm DWORD ?
					
					; Puntero a la matriz de adyacencia
 0000018A 00000000			grafo DWORD ?

					; Arreglo de las distancias
 0000018E 00000000			distancias DWORD ?
					
					; Arreglo para nodos visitados
 00000192 00000000			boo DWORD ?

					; Nodo de partida
 00000196 00000000			partida DWORD ?

					; Mensaje para la entrega de resultados
 0000019A 4E 6F 64 6F 20		res BYTE "Nodo ", 0
	   00
 000001A0 3A 09 00			p BYTE ":", 9h, 0

 00000000			.CODE
 00000000				Dijkstra PROC, graph: DWORD, dists: DWORD, conf: DWORD, start: DWORD
						LOCAL x: REAL4, j: DWORD, zer: REAL4 ; Creamos variables locales para el procedimiento
						
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
 00000003  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 00000006  9B DB E3				finit
						
						; Inicializamos la distancia del nodo de partida en 0
 00000009  8B 75 0C				mov esi, dists
 0000000C  8B 45 14				mov eax, start
 0000000F  6B C0 04				imul eax, TYPE REAL4
 00000012  6A 00				push 0
 00000014  8F 04 06				pop [esi + eax]
						
						; Iteramos para obtener las distancias minimas
 00000017  BB 00000000				mov ebx, 0
 0000001C  3B 1D 0000017A R	wM:			cmp ebx, n
 00000022  0F 8D 000000B1				jge ewM
							
							; Seleccionamos el menor nodo
 00000028  C7 45 FC					mov x, 7F800000h
	   7F800000
 0000002F  B9 00000000					mov ecx, 0
 00000034  3B 0D 0000017A R	f1:				cmp ecx, n
 0000003A  7D 34						jge ef1
 0000003C  8B 7D 0C						mov edi, dists
 0000003F  8B D1						mov edx, ecx
 00000041  6B D2 04						imul edx, TYPE REAL4
 00000044  D9 04 17						fld REAL4 PTR [edi + edx]
 00000047  D8 5D FC						fcomp x
 0000004A  DF E0						fnstsw ax
 0000004C  9E							sahf
 0000004D  73 1E						jnb less
 0000004F  8B 75 10							mov esi, conf
 00000052  8B 04 16							mov eax, [esi + edx]
 00000055  E8 00000000 E						call WriteDec
 0000005A  E8 00000000 E						call Crlf
 0000005F  83 F8 00							cmp eax, 0
 00000062  75 09							jne less
 00000064  89 4D F8								mov j, ecx
 00000067  FF 34 17								push [edi + edx]
 0000006A  8F 45 FC								pop x
 0000006D  41			less:			inc ecx
 0000006E  EB C4						jmp f1
 00000070  8B 75 10		ef1:		mov esi, conf
 00000073  8B 55 F8					mov edx, j
 00000076  6B D2 04					imul edx, TYPE REAL4
 00000079  6A 01					push 1
 0000007B  8F 04 16					pop [esi + edx]
 0000007E  43						inc ebx
							
 0000007F  B9 00000000					mov ecx, 0
 00000084  3B 0D 0000017A R	f2:				cmp ecx, n
 0000008A  7D 48						jge ef2
 0000008C  8B 75 08						mov esi, graph
 0000008F  8B 55 F8						mov edx, j
 00000092  0F AF 15						imul edx, n
	   0000017A R
 00000099  6B D2 04						imul edx, TYPE REAL4
 0000009C  03 F2						add esi, edx
 0000009E  8B D1						mov edx, ecx
 000000A0  6B D2 04						imul edx, TYPE REAL4
 000000A3  03 F2						add esi, edx

 000000A5  C7 45 F4						mov zer, 0
	   00000000
 000000AC  D9 06						fld REAL4 PTR [esi]
 000000AE  D8 55 F4						fcom zer
 000000B1  74 1C						je is1
 000000B3  8B 55 F8							mov edx, j
 000000B6  6B D2 04							imul edx, TYPE REAL4
 000000B9  8B 7D 0C							mov edi, dists
 000000BC  D8 04 17							fadd REAL4 PTR [edi + edx]
 000000BF  8B D1							mov edx, ecx
 000000C1  6B D2 04							imul edx, TYPE REAL4
 000000C4  D8 14 17							fcom REAL4 PTR [edi + edx]
 000000C7  DF E0							fnstsw ax
 000000C9  9E								sahf
 000000CA  73 03							jnb is1
 000000CC  D9 14 17								fst REAL4 PTR [edi + edx]
 000000CF  D9 1E		is1:			fstp REAL4 PTR[esi]
 000000D1  41							inc ecx
 000000D2  EB B0						jmp f2
 000000D4  E9 FFFFFF43		ef2:		jmp wM		
 000000D9			ewM:		
 000000D9  8B 75 0C				mov esi, dists
 000000DC  B9 00000000				mov ecx, 0
 000000E1  3B 0D 0000017A R	pr:			cmp ecx, n
 000000E7  7D 37					jge epr
 000000E9  BA 0000019A R					mov edx, OFFSET res
 000000EE  E8 00000000 E					call WriteString
 000000F3  8B C1						mov eax, ecx
 000000F5  40							inc eax
 000000F6  E8 00000000 E					call WriteDec
 000000FB  BA 000001A0 R					mov edx, OFFSET p
 00000100  E8 00000000 E					call WriteString
								
 00000105  8B 75 0C						mov esi, dists
 00000108  8B D1						mov edx, ecx
 0000010A  6B D2 04						imul edx, TYPE REAL4
 0000010D  D9 04 16						fld REAL4 PTR [esi + edx]
 00000110  E8 00000000 E					call WriteFloat
 00000115  E8 00000000 E					call Crlf
 0000011A  D9 1C 16						fstp REAL4 PTR [esi + edx]
								
 0000011D  41							inc ecx
 0000011E  EB C1						jmp pr
 00000120			epr:	

						ret
 00000120  C9		   *	    leave  
 00000121  C2 0010	   *	    ret    00010h
 00000124				Dijkstra ENDP
					
 00000124				main PROC
 00000124  9B DB E3				finit
						
						; Imprimimos el mensaje de bienvenida
 00000127  BA 00000000 R			mov edx, OFFSET bienvenida
 0000012C  E8 00000000 E			call WriteString
 00000131  E8 00000000 E			call Crlf
 00000136  E8 00000000 E			call Crlf

						; Pedimos la cantidad de nodos del grafo
 0000013B  BA 00000080 R			mov edx, OFFSET nodos
 00000140  E8 00000000 E			call WriteString
 00000145  E8 00000000 E			call ReadDec
 0000014A  E8 00000000 E			call Crlf
 0000014F  A3 0000017A R			mov n, eax
						
						; Inicializamos las variables dim y siz
 00000154  A1 0000017A R			mov eax, n
 00000159  0F AF 05				imul eax, n
	   0000017A R
 00000160  A3 0000017E R			mov dim, eax
 00000165  6B C0 04				imul eax, TYPE REAL4
 00000168  A3 00000182 R			mov siz, eax
						
						; Preparamos el heap para guardar los datos
						invoke GetProcessHeap ; Obtenemos el manejador del heap actual, el cual es guardado en eax
 0000016D  E8 00000000 E   *	    call   GetProcessHeap
 00000172  83 F8 00				cmp eax, NULL ; Si no se obtuvo correctamente el manejador,
 00000175  0F 84 000001A0			je nAlloc	  ; detenemos el programa
 0000017B  A3 00000186 R			mov hhm, eax
						
						; Inicializamos la matriz de adyacencia en el heap
						invoke HeapAlloc, hhm, HEAP_ZERO_MEMORY, siz ; Asignamos dinamicamente la memoria para almacenar la matriz de adyacencia (retorna en
 00000180  FF 35 00000182 R *	    push   siz
 00000186  6A 08	   *	    push   +000000008h
 00000188  FF 35 00000186 R *	    push   hhm
 0000018E  E8 00000000 E   *	    call   HeapAlloc
																	 ; eax un puntero al bloque de memoria), inicializando todos los valores con 0
 00000193  83 F8 00				cmp eax, NULL ; Si no se asigno correctamente el puntero,
 00000196  0F 84 0000017F			je nAlloc	  ; detenemos el programa
 0000019C  A3 0000018A R			mov grafo, eax
						
						; PEDIMOS LAS CONEXIONES DEL GRAFO
						
						; Ciclo externo, para pedir la cantidad de conexiones de cada nodo
 000001A1  BB 00000000				mov ebx, 0
 000001A6  3B 1D 0000017A R	wN:			cmp ebx, n
 000001AC  0F 8D 00000096				jge ewN
							
 000001B2  BA 000000A9 R				mov edx, OFFSET con1
 000001B7  E8 00000000 E				call WriteString
 000001BC  8B C3					mov eax, ebx
 000001BE  40						inc eax
 000001BF  E8 00000000 E				call WriteDec
 000001C4  BA 000000D5 R				mov edx, OFFSET con2
 000001C9  E8 00000000 E				call WriteString
 000001CE  E8 00000000 E				call ReadDec
 000001D3  E8 00000000 E				call Crlf
 000001D8  A3 0000016E R				mov aux1, eax
							
							; Ciclo interno, para pedir las distancias de las conexiones de cada nodo
 000001DD  B9 00000000					mov ecx, 0
 000001E2  3B 0D 0000016E R	wD:				cmp ecx, aux1
 000001E8  7D 58						jge ewD
								
								; Pedimos el nodo con el cual esta conectado el nodo actual
 000001EA  BA 000000D8 R					mov edx, OFFSET con3
 000001EF  E8 00000000 E					call WriteString
 000001F4  E8 00000000 E					call ReadDec
 000001F9  48							dec eax
 000001FA  A3 00000172 R					mov aux2, eax
								
								; Pedimos la distancia de la conexion actual
 000001FF  BA 00000104 R					mov edx, OFFSET con4
 00000204  E8 00000000 E					call WriteString
 00000209  E8 00000000 E					call ReadFloat
 0000020E  E8 00000000 E					call Crlf
								
								; Calculamos la coordenada de la conexion en la matriz de adyacencia y la introducimos
 00000213  8B 35 0000018A R					mov esi, grafo
 00000219  8B C3						mov eax, ebx
 0000021B  0F AF 05						imul eax, n
	   0000017A R
 00000222  6B C0 04						imul eax, TYPE REAL4
 00000225  03 F0						add esi, eax
 00000227  A1 00000172 R					mov eax, aux2
 0000022C  6B C0 04						imul eax, TYPE REAL4
 0000022F  03 F0						add esi, eax
 00000231  D9 1D 00000176 R					fstp auxF
 00000237  FF 35 00000176 R					push auxF
 0000023D  8F 06						pop [esi]
								
 0000023F  41							inc ecx
 00000240  EB A0						jmp wD
 00000242			ewD:		
 00000242  43						inc ebx
 00000243  E9 FFFFFF5E					jmp wN
 00000248			ewN:	
						; Pedimos el nodo de partida
 00000248  BA 0000012A R			mov edx, OFFSET ini
 0000024D  E8 00000000 E			call WriteString
 00000252  E8 00000000 E			call ReadDec
 00000257  48					dec eax
 00000258  A3 00000196 R			mov partida, eax

						; Inicializamos el arreglo para almacenar las distancias de la misma manera que la matriz de adyacencia
 0000025D  8B 1D 0000017A R			mov ebx, n
 00000263  6B DB 04				imul ebx, TYPE REAL4
						invoke HeapAlloc, hhm, HEAP_ZERO_MEMORY, ebx
 00000266  53		   *	    push   ebx
 00000267  6A 08	   *	    push   +000000008h
 00000269  FF 35 00000186 R *	    push   hhm
 0000026F  E8 00000000 E   *	    call   HeapAlloc
 00000274  83 F8 00				cmp eax, NULL
 00000277  0F 84 0000009E			je nAlloc
 0000027D  A3 0000018E R			mov distancias, eax

						; Inicializamos el arreglo de distancias con mas infinito
 00000282  8B 35 0000018E R			mov esi, distancias
 00000288  B9 00000000				mov ecx, 0
 0000028D  3B 0D 0000017A R	wN2:		cmp ecx, n
 00000293  7D 10					jge ewN2
 00000295  8B D9					mov ebx, ecx
 00000297  6B DB 04					imul ebx, TYPE REAL4
 0000029A  68 7F800000					push 7F800000h ; Representacion de mas infinito
 0000029F  8F 04 1E					pop [esi + ebx]
 000002A2  41						inc ecx
 000002A3  EB E8					jmp wN2
 000002A5			ewN2:
						; Inicializamos un arreglo para comprobar luego en el algoritmo los nodos que ya han sido visitados
 000002A5  8B 1D 0000017A R			mov ebx, n
						invoke HeapAlloc, hhm, HEAP_ZERO_MEMORY, ebx
 000002AB  53		   *	    push   ebx
 000002AC  6A 08	   *	    push   +000000008h
 000002AE  FF 35 00000186 R *	    push   hhm
 000002B4  E8 00000000 E   *	    call   HeapAlloc
 000002B9  83 F8 00				cmp eax, NULL
 000002BC  74 5D				je nAlloc
 000002BE  A3 00000192 R			mov boo, eax
						
						; Llamamos al procedimiento para ejecutar el algoritmo
						invoke Dijkstra, grafo, distancias, boo, partida
 000002C3  FF 35 00000196 R *	    push   partida
 000002C9  FF 35 00000192 R *	    push   boo
 000002CF  FF 35 0000018E R *	    push   distancias
 000002D5  FF 35 0000018A R *	    push   grafo
 000002DB  E8 FFFFFD20	   *	    call   Dijkstra

						; Si el programa termina con exito, liberamos la memoria ocupada por la matriz de adyacencia
						invoke HeapFree, hhm, 0, grafo
 000002E0  FF 35 0000018A R *	    push   grafo
 000002E6  6A 00	   *	    push   +000000000h
 000002E8  FF 35 00000186 R *	    push   hhm
 000002EE  E8 00000000 E   *	    call   HeapFree
						invoke HeapFree, hhm, 0, distancias
 000002F3  FF 35 0000018E R *	    push   distancias
 000002F9  6A 00	   *	    push   +000000000h
 000002FB  FF 35 00000186 R *	    push   hhm
 00000301  E8 00000000 E   *	    call   HeapFree
						invoke HeapFree, hhm, 0, boo
 00000306  FF 35 00000192 R *	    push   boo
 0000030C  6A 00	   *	    push   +000000000h
 0000030E  FF 35 00000186 R *	    push   hhm
 00000314  E8 00000000 E   *	    call   HeapFree
 00000319  EB 0A				jmp en
						
						; En caso de que la asignacion de memoria fallase, le informamos al usuario
 0000031B  BA 00000147 R	nAlloc:	mov edx, OFFSET fail
 00000320  E8 00000000 E			call WriteString
						
 00000325			en:		
						exit
 00000325  6A 00	   *	    push   +000000000h
 00000327  E8 00000000 E   *	    call   ExitProcess
 0000032C				main ENDP
					END main
Microsoft (R) Macro Assembler Version 14.11.25547.0	    11/06/17 13:22:58
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001A3 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000032C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Dijkstra . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000124 Public STDCALL
  graph  . . . . . . . . . . . .	DWord	 bp + 00000008
  dists  . . . . . . . . . . . .	DWord	 bp + 0000000C
  conf . . . . . . . . . . . . .	DWord	 bp + 00000010
  start  . . . . . . . . . . . .	DWord	 bp + 00000014
  x  . . . . . . . . . . . . . .	DWord	 bp - 00000004
  j  . . . . . . . . . . . . . .	DWord	 bp - 00000008
  zer  . . . . . . . . . . . . .	DWord	 bp - 0000000C
  wM . . . . . . . . . . . . . .	L Near	 0000001C _TEXT	
  f1 . . . . . . . . . . . . . .	L Near	 00000034 _TEXT	
  less . . . . . . . . . . . . .	L Near	 0000006D _TEXT	
  ef1  . . . . . . . . . . . . .	L Near	 00000070 _TEXT	
  f2 . . . . . . . . . . . . . .	L Near	 00000084 _TEXT	
  is1  . . . . . . . . . . . . .	L Near	 000000CF _TEXT	
  ef2  . . . . . . . . . . . . .	L Near	 000000D4 _TEXT	
  ewM  . . . . . . . . . . . . .	L Near	 000000D9 _TEXT	
  pr . . . . . . . . . . . . . .	L Near	 000000E1 _TEXT	
  epr  . . . . . . . . . . . . .	L Near	 00000120 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000124 _TEXT	Length= 00000208 Public STDCALL
  wN . . . . . . . . . . . . . .	L Near	 000001A6 _TEXT	
  wD . . . . . . . . . . . . . .	L Near	 000001E2 _TEXT	
  ewD  . . . . . . . . . . . . .	L Near	 00000242 _TEXT	
  ewN  . . . . . . . . . . . . .	L Near	 00000248 _TEXT	
  wN2  . . . . . . . . . . . . .	L Near	 0000028D _TEXT	
  ewN2 . . . . . . . . . . . . .	L Near	 000002A5 _TEXT	
  nAlloc . . . . . . . . . . . .	L Near	 0000031B _TEXT	
  en . . . . . . . . . . . . . .	L Near	 00000325 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
aux1 . . . . . . . . . . . . . .	DWord	 0000016E _DATA	
aux2 . . . . . . . . . . . . . .	DWord	 00000172 _DATA	
auxF . . . . . . . . . . . . . .	DWord	 00000176 _DATA	
bienvenida . . . . . . . . . . .	Byte	 00000000 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
boo  . . . . . . . . . . . . . .	DWord	 00000192 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
con1 . . . . . . . . . . . . . .	Byte	 000000A9 _DATA	
con2 . . . . . . . . . . . . . .	Byte	 000000D5 _DATA	
con3 . . . . . . . . . . . . . .	Byte	 000000D8 _DATA	
con4 . . . . . . . . . . . . . .	Byte	 00000104 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dim  . . . . . . . . . . . . . .	DWord	 0000017E _DATA	
distancias . . . . . . . . . . .	DWord	 0000018E _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fail . . . . . . . . . . . . . .	Byte	 00000147 _DATA	
grafo  . . . . . . . . . . . . .	DWord	 0000018A _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hhm  . . . . . . . . . . . . . .	DWord	 00000186 _DATA	
ini  . . . . . . . . . . . . . .	Byte	 0000012A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
nodos  . . . . . . . . . . . . .	Byte	 00000080 _DATA	
n  . . . . . . . . . . . . . . .	DWord	 0000017A _DATA	
partida  . . . . . . . . . . . .	DWord	 00000196 _DATA	
p  . . . . . . . . . . . . . . .	Byte	 000001A0 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
res  . . . . . . . . . . . . . .	Byte	 0000019A _DATA	
siz  . . . . . . . . . . . . . .	DWord	 00000182 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
